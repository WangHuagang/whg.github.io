<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <link href="/2020/07/19/mvvm/"/>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>Webpack 多环境打包命令配置</title>
      <link href="/2020/03/18/webpackBuildConfig/"/>
      <content type="html"><![CDATA[<h1 id="Webpack-多环境打包命令配置"><a href="#Webpack-多环境打包命令配置" class="headerlink" title="Webpack 多环境打包命令配置"></a>Webpack 多环境打包命令配置</h1><p>在平时开发或者部署项目过程中，经常出现切换环境、API、配置文件等，每次修改麻烦，而且有时可能忘掉某些切换导致项目跑出来有问题。</p><p>那我们就想是否可以根据不同的运行/打包命令来自动化的进行相关文件的切换，省时省力，还不会出错。其实我们只需要关注<font color="#0099ff" size="2">process.env.NODE_ENV</font>的值就可以了。</p><blockquote><p>process 对象是一个全局变量，它提供有关当前 Node.js 进程的信息并对其进行控制。 作为一个全局变量，它始终可供 Node.js 应用程序使用，无需使用 require/import, 直接用就好了。</p></blockquote><p>例如： 我们可以根据不同的环境变量来设置不同的API</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV == <span class="string">'development'</span>) &#123;</span><br><span class="line">    API.baseURL = testUrl;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    API.baseURL = baseURL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>那我们的思路： 应该是在设置打包命令的时候配置不同的环境变量</p></blockquote><p>目前我们的默认的打包命名：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"webpack-dev-server --inline --progress --config build/webpack.dev.conf.js"</span>,</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"npm run dev"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"node build/build.js"</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><blockquote><p>那我们怎样才能设置环境变量？</p></blockquote><p>我们可以采用cross-env这个包，它是运行跨平台设置和使用Node中的环境变量的脚本。主要因为在windows版本和linux中设置NODE_ENV的语法不同, 它进行了封装和兼容，直接安装依赖包就可以用了。</p><p><code>npm isntall cross-env -D</code></p><p>现在我们开始配置我们自己的打包命令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"dev:test"</span>: <span class="string">"cross-env NODE_ENV=test webpack-dev-server --inline --progress --config build/webpack.dev.conf.js"</span>,</span><br></pre></td></tr></table></figure><p>我们配置了dev:test命令，与dev命令不同的就是，通过cross_env 配置了node的环境变量为test，现在还需要在config/新建一个test.env.js的文件，直接把config/dev.env.js的拷贝过来然后改动一下即可。把一下内容搞进去就可以了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> devEnv = <span class="built_in">require</span>(<span class="string">'./dev.env'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(devEnv, &#123;</span><br><span class="line">    NODE_ENV: <span class="string">'"test"'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>到目前为止我们通过命令的方式配置好了，但是我们还需要改webpack的配置，使得webpack在编译的时候使用我们配置的环境变量。</p><p>build/webpack.dev.conf.js中：<br>我们找到以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpackConfig = merge(baseWebpackConfig, &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">            <span class="string">'process.env'</span>: env</span><br><span class="line">        &#125;),</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里的DefinePlugin插件允许创建一个在编译时可以配置的全局常量。<br>现在在这里我们可以添加一个判断，来动态的指定process.env.NODE_ENV：</p><blockquote><p><font color="#0099ff" size="2" face="黑体">注意踩坑: 因为这个插件直接执行文本替换，给定的值必须包含字符串本身内的实际引号。通常，有两种方式来达到这个效果，使用 ‘“production”‘, 或者使用 JSON.stringify(‘production’)。 ——webpack官网</font><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dev = <span class="built_in">require</span>(<span class="string">'../config/dev.env'</span>)</span><br><span class="line"><span class="keyword">const</span> test = <span class="built_in">require</span>(<span class="string">'../config/test.env'</span>)</span><br><span class="line"><span class="keyword">const</span> isDev = process.env.NODE_ENV === <span class="string">'development'</span></span><br></pre></td></tr></table></figure></p></blockquote><p>我们通过环境变量来判断是dev还是test环境，然后我们再来配置全局变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpackConfig = merge(baseWebpackConfig, &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">            <span class="comment">// 'process.env': env</span></span><br><span class="line">            <span class="string">'process.env'</span>: isDev ? dev : test</span><br><span class="line">        &#125;),</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>OK,到目前为止，我们的环境变量设置完成，我们到main.js中可以打印出来看，不同打包命令拿到的环境变量是不一样的，有了这个以后我们就可以根据我们的需求为所欲为的。</p><p>main.js中：<br><code>console.log(&#39;NODE_ENV:&#39;, process.env.NODE_ENV) // NODE_ENV: test</code></p>]]></content>
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Webpack 前端自动化部署项目至服务器（Vue）</title>
      <link href="/2020/03/15/autoDeploy/"/>
      <content type="html"><![CDATA[<p>对于没有搭建Jenkins等自动化打包平台来说，平时部署前端项目流程是：先部署到测试环境ok后再发布到生产环境上，部署到测试环境用 xshell 连上服务器，然后用 xftp /winSCP连接服务器，然后本地 build 项目，接着把 build 好的文件通过 xftp/winSCP 上传到服务器上，整个流程感觉稍有繁琐，重复。</p><p>我们可以利用scp2自动化部署到静态文件服务器，从而实现自动化部署前端项目！</p><h2 id="1、安装scp2"><a href="#1、安装scp2" class="headerlink" title="1、安装scp2"></a>1、安装scp2</h2><p>scp2是一个基于ssh2增强实现，纯粹使用JavaScript编写。<br>而ssh2就是一个使用nodejs对于SSH2的模拟实现。scp是Linux系统下基于SSH登陆进行安全的远程文件拷贝命令。这里我们就用这个功能，在Vue编译构建成功之后，将项目推送至测试/生产环境，以方便测试，提高效率。<br>安装scp2：<br><code>npm install scp2 --save-dev</code></p><h2 id="2、配置测试-生产环境-服务器SSH远程登陆基本信息"><a href="#2、配置测试-生产环境-服务器SSH远程登陆基本信息" class="headerlink" title="2、配置测试/生产环境 服务器SSH远程登陆基本信息"></a>2、配置测试/生产环境 服务器SSH远程登陆基本信息</h2><p>在项目根目录下新建deploy文件夹，再新建config.js来存放服务器的配置信息:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务器相关配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> SERVER_LIST = [</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="string">'test'</span>,</span><br><span class="line">    name: <span class="string">'测试环境'</span>,</span><br><span class="line">    host: <span class="string">'80.xxx.xx.xx'</span>, <span class="comment">// ip</span></span><br><span class="line">    port: <span class="number">22</span>, <span class="comment">// 端口</span></span><br><span class="line">    username: <span class="string">'root'</span>,</span><br><span class="line">    password: <span class="string">'******'</span>,</span><br><span class="line">    path: <span class="string">'/opt/xxx/front'</span> <span class="comment">// 项目静态文件存放地址</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="string">'prod'</span>,</span><br><span class="line">    name: <span class="string">'正式环境'</span>,</span><br><span class="line">    host: <span class="string">'101.x.xx.xx'</span>,</span><br><span class="line">    port: <span class="number">22</span>,</span><br><span class="line">    username: <span class="string">'root'</span>,</span><br><span class="line">    password: <span class="string">'******'</span>,</span><br><span class="line">    path: <span class="string">'/opt/xxx/front'</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"><span class="built_in">module</span>.exports = SERVER_LIST;</span><br></pre></td></tr></table></figure></p><h2 id="3、使用scp2库-创建自动化部署脚本"><a href="#3、使用scp2库-创建自动化部署脚本" class="headerlink" title="3、使用scp2库,创建自动化部署脚本"></a>3、使用scp2库,创建自动化部署脚本</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> scpClient = <span class="built_in">require</span>(<span class="string">'scp2'</span>);</span><br><span class="line"><span class="keyword">const</span> ora = <span class="built_in">require</span>(<span class="string">'ora'</span>);</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>);</span><br><span class="line"><span class="keyword">const</span> server = <span class="built_in">require</span>(<span class="string">'./config);</span></span><br><span class="line"><span class="string">const spinner = ora('</span>正在发布到<span class="string">' + (process.env.NODE_ENV === '</span>prod<span class="string">' ? '</span>生产<span class="string">' : '</span>测试<span class="string">') + '</span>服务器...<span class="string">');</span></span><br><span class="line"><span class="string">spinner.start();</span></span><br><span class="line"><span class="string">scpClient.scp(</span></span><br><span class="line"><span class="string">  '</span>dist/<span class="string">',</span></span><br><span class="line"><span class="string">  &#123;</span></span><br><span class="line"><span class="string">    host: server.host,</span></span><br><span class="line"><span class="string">    port: server.port,</span></span><br><span class="line"><span class="string">    username: server.username,</span></span><br><span class="line"><span class="string">    password: server.password,</span></span><br><span class="line"><span class="string">    path: server.path</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  function (err) &#123;</span></span><br><span class="line"><span class="string">    spinner.stop();</span></span><br><span class="line"><span class="string">    if (err) &#123;</span></span><br><span class="line"><span class="string">      console.log(chalk.red('</span>发布失败.\n<span class="string">'));</span></span><br><span class="line"><span class="string">      throw err;</span></span><br><span class="line"><span class="string">    &#125; else &#123;</span></span><br><span class="line"><span class="string">      console.log(chalk.green('</span>Success! 成功发布到<span class="string">' + (process.env.NODE_ENV === '</span>prod<span class="string">' ? '</span>生产<span class="string">' : '</span>测试<span class="string">') + '</span>服务器! \n<span class="string">'));</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">);</span></span><br></pre></td></tr></table></figure><p>通过scp库我们就能把dist文件夹下的所有文件上传到服务器指定路径，从而完成我们项目的自动化部署。</p><h2 id="4、添加-package-json-中的-scripts-命令-自定义名称为-“deploy”"><a href="#4、添加-package-json-中的-scripts-命令-自定义名称为-“deploy”" class="headerlink" title="4、添加 package.json 中的 scripts 命令, 自定义名称为 “deploy”"></a>4、添加 package.json 中的 scripts 命令, 自定义名称为 “deploy”</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"serve"</span>: <span class="string">"vue-cli-service serve --mode dev"</span>,</span><br><span class="line">  <span class="string">"build"</span>: <span class="string">"vue-cli-service build --mode prod"</span>,</span><br><span class="line">  <span class="string">"deploy"</span>: <span class="string">"cross-env NODE_ENV=prod node ./deploy"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>至此，我们直接执行命令npm run deploy就能完成自动化部署。</p><p>但是，目前还有几个问题需要解决：</p><ol><li>怎样区分多环境部署？</li><li>服务器账号和密码为了保密不想写在配置里怎么办？</li><li>想备份上一版本的文件怎么办？</li></ol><h3 id="4-1-区分多环境部署"><a href="#4-1-区分多环境部署" class="headerlink" title="4.1 区分多环境部署"></a>4.1 区分多环境部署</h3><ul><li><p>第一种方法：通过配置不同环境不同的部署命令来区分，比如：npm run deploy:test/npm run deploy:prod，然后通过不同命令的环境变量来读取不同的配置文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"deploy:dev"</span>: <span class="string">"cross-env NODE_ENV=dev node ./deploy"</span>,</span><br><span class="line"><span class="string">"deploy:prod"</span>: <span class="string">" cross-env NODE_ENV=prod node ./deploy"</span></span><br></pre></td></tr></table></figure></li><li><p>第二种方法：通过用户从命令行的输入来获取部署的环境，将在下一点详细讲解。</p></li></ul><h3 id="4-2-服务器账号和密码为了保密不想写在配置里怎么办？"><a href="#4-2-服务器账号和密码为了保密不想写在配置里怎么办？" class="headerlink" title="4.2 服务器账号和密码为了保密不想写在配置里怎么办？"></a>4.2 服务器账号和密码为了保密不想写在配置里怎么办？</h3><p>为了保密性，这两个信息不会存放在配置文件里，那么我们可以通过node 的readline模块来让用户输入账号和密码。<br>导入readline模块：<br><code>const readline = require(&#39;readline&#39;);</code></p><p>创建readline实例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rl = readline.createInterface(&#123;</span><br><span class="line">  input: process.stdin,</span><br><span class="line">  output: process.stdout</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>利用readlinde的quetion方法来“提问”，然后接受用户输入的值：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rl.question(‘请输入服务器账号：’, (<span class="keyword">as</span>) =&gt; &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">as</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>至此，我们就能拿到用户输入的账号了。<br>现在我们整理一下来获取用户输入的环境、账号、密码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> server = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">const</span> questions = [<span class="string">'Please input publish environment(test\\prod\\yanshi): '</span>, <span class="string">'Please input server username: '</span>, <span class="string">'Please input server password: '</span>]</span><br><span class="line"><span class="keyword">const</span> linelimit = <span class="number">3</span>; <span class="comment">// 用户输入的行数</span></span><br><span class="line"><span class="keyword">let</span> inputArr = [];</span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runQueLoop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (index == linelimit) &#123;</span><br><span class="line">    server = config.find(<span class="function"><span class="params">i</span> =&gt;</span> i.id == inputArr[<span class="number">0</span>]) <span class="comment">//通过id匹配环境</span></span><br><span class="line">    server.username = inputArr[<span class="number">1</span>];</span><br><span class="line">    server.password = inputArr[<span class="number">2</span>];</span><br><span class="line">    copyFile();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  rl.question(questions[index], (<span class="keyword">as</span>) =&gt; &#123;</span><br><span class="line">    inputArr[index] = <span class="keyword">as</span>;</span><br><span class="line">    index++;</span><br><span class="line">    runQueLoop()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rl.on(<span class="string">'close'</span>,  () =&gt; &#123; process.exit(<span class="number">0</span>) &#125;)</span><br><span class="line">runQueLoop()</span><br></pre></td></tr></table></figure></p><p>OK, 我们拿到了用户输入的环境、服务器账号和密码，我们服务器的配置信息就完整了，并且保证了私密信息的保密性，也提升了与用户的交互。</p><h3 id="4-3-如何备份上一版本的文件？"><a href="#4-3-如何备份上一版本的文件？" class="headerlink" title="4.3 如何备份上一版本的文件？"></a>4.3 如何备份上一版本的文件？</h3><p>备份文件我首先想到的就是通过使用Linux的命令行还进行文件的操作，大体的思路：</p><ol><li>进入到静态文件存放的根目录；</li><li>新建一个备份文件夹（我们可以通过时间戳来命名，也方便回溯版本）；</li><li>将现在正运行版本文件夹下的所有文件拷贝的新建的备份文件夹；</li><li>文件备份就完成了，然后我们再把我们需要发布的静态文件上传即可！<br>有了思路过后，我们来使用ssh2库来执行脚本命令，实现我们的思路：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Client = <span class="built_in">require</span>(<span class="string">'ssh2'</span>).Client;</span><br><span class="line"><span class="keyword">var</span> conn = <span class="keyword">new</span> Client();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copyFile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> pathArr = server.path.split(<span class="string">'/'</span>), rootFolder = pathArr[pathArr.length<span class="number">-1</span>];<span class="comment">//获取根文件夹</span></span><br><span class="line">  pathArr.pop();</span><br><span class="line">  <span class="keyword">let</span> rootPath = pathArr.join(<span class="string">'/'</span>);</span><br><span class="line">  <span class="keyword">const</span> conn = <span class="keyword">new</span> Client();</span><br><span class="line"></span><br><span class="line">  conn.on(<span class="string">'ready'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    conn.exec(<span class="string">`cd <span class="subst">$&#123;rootPath&#125;</span>\n</span></span><br><span class="line"><span class="string">    mkdir <span class="subst">$&#123;rootFolder&#125;</span><span class="subst">$&#123;currTime&#125;</span>\n </span></span><br><span class="line"><span class="string">    cp -r <span class="subst">$&#123;rootFolder&#125;</span> <span class="subst">$&#123;rootFolder&#125;</span><span class="subst">$&#123;currTime&#125;</span>\n </span></span><br><span class="line"><span class="string">    rm -rf <span class="subst">$&#123;rootFolder&#125;</span>`</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, stream</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">        stream.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">code, signal</span>) </span>&#123;</span><br><span class="line">          <span class="comment">// 在执行shell命令后，开始上传部署项目代码</span></span><br><span class="line">          spinner.start();</span><br><span class="line">          scpClient.scp(</span><br><span class="line">            <span class="string">'./dist'</span>,</span><br><span class="line">            &#123;</span><br><span class="line">              host: server.host,</span><br><span class="line">              port: server.port,</span><br><span class="line">              username: server.username,</span><br><span class="line">              password: server.password,</span><br><span class="line">              path: server.path</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">              spinner.stop();</span><br><span class="line">              <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(chalk.red(<span class="string">'Fail! 发布失败.\n'</span>));</span><br><span class="line">                rl.close();</span><br><span class="line">                <span class="keyword">throw</span> err;</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(chalk.green(<span class="string">'Success! 成功发布到'</span> + server.host + <span class="string">'服务器! \n'</span>));</span><br><span class="line">                rl.close();</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          );</span><br><span class="line">          conn.end();</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">    .on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(chalk.red(<span class="string">'Fail! 服务器连接失败.\n'</span>));</span><br><span class="line">      rl.close();</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;)</span><br><span class="line">    .connect(&#123;</span><br><span class="line">      host: server.host,</span><br><span class="line">      port: server.port,</span><br><span class="line">      username: server.username,</span><br><span class="line">      password: server.password</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>OK，在这里我们通过配置文件里的path来动态获取根目录和根文件夹，执行备份命令后再进行文件上传！</p>]]></content>
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>实习期间作品（部分）</title>
      <link href="/2020/03/08/workExpress/"/>
      <content type="html"><![CDATA[<p>实习（实习公司：Testbird）期间的部分作品展示！实习期间<strong>独立负责兼容/场景测试在线报告</strong>从零开始开发到最终上线，目前已经上线运行6+个月！在线演示地址1：<strong><a href="https://comptest.testbird.com/scene/#/d4a7c1ec875d4cd390e25f94d0304f76?config=eyJhbW91bnQiOiAwLCAiYnVzaW5lc3MiOiAiZ2FtZSIsICJhY2NlcHRfbGFuZ3VhZ2UiOiAiemgtY24iLCAibG9jYWxlIjogInpoX0NOIiwgInJlZ2lzdGVyX3R5cGUiOiAwLCAib3MiOiAiYW5kcm9pZCIsICJub19jYWNoZSI6IHRydWUsICJyZWdpc3Rlcl90eXBlX25hbWUiOiAiY29tbW9uIiwgInNlcnZlciI6ICJodHRwczovL2NvbXB0ZXN0LnRlc3RiaXJkLmNvbS9zY2VuZS8ifQ%3D%3D" target="_blank" rel="noopener">兼容/场景测试在线报告</a></strong>—–<strong><a href="https://comptest.testbird.com/frontend_zc/?config=eyJhbW91bnQiOiAwLCAiYnVzaW5lc3MiOiAiZ2FtZSIsICJhY2NlcHRfbGFuZ3VhZ2UiOiAiemgtY24iLCAibG9jYWxlIjogInpoX0NOIiwgInJlZ2lzdGVyX3R5cGUiOiAwLCAib3MiOiAiYW5kcm9pZCIsICJub19jYWNoZSI6IHRydWUsICJyZWdpc3Rlcl90eXBlX25hbWUiOiAiY29tbW9uIiwgInNlcnZlciI6ICJodHRwczovL2NvbXB0ZXN0LnRlc3RiaXJkLmNvbS9mcm9udGVuZF96Yy8ifQ%3D%3D#/report_v2/83d36733cb7f4f699d5b3f076d4ce049" target="_blank" rel="noopener">手游测试在线报告</a></strong><a id="more"></a></p><h2 id="1-兼容-场景测试在线报告"><a href="#1-兼容-场景测试在线报告" class="headerlink" title="1.兼容/场景测试在线报告"></a>1.兼容/场景测试在线报告</h2><p>演示地址：<strong><a href="https://comptest.testbird.com/scene/#/d4a7c1ec875d4cd390e25f94d0304f76?config=eyJhbW91bnQiOiAwLCAiYnVzaW5lc3MiOiAiZ2FtZSIsICJhY2NlcHRfbGFuZ3VhZ2UiOiAiemgtY24iLCAibG9jYWxlIjogInpoX0NOIiwgInJlZ2lzdGVyX3R5cGUiOiAwLCAib3MiOiAiYW5kcm9pZCIsICJub19jYWNoZSI6IHRydWUsICJyZWdpc3Rlcl90eXBlX25hbWUiOiAiY29tbW9uIiwgInNlcnZlciI6ICJodHRwczovL2NvbXB0ZXN0LnRlc3RiaXJkLmNvbS9zY2VuZS8ifQ%3D%3D" target="_blank" rel="noopener">演示报告</a></strong></p><p>进入公司后直接开始开发的一个新项目，主要是用于展示APP测试的结果，反馈给客户。</p><h4 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h4><p>Vue+Vuex+axios+Echarts，使用vue的全家桶进行开发，webpack进行打包，Jenkins进行项目部署！</p><h4 id="项目概述"><a href="#项目概述" class="headerlink" title="项目概述"></a>项目概述</h4><ul><li>包含总体概况、汇总报告页、问题报告页、终端报告页、性能报告页、机型详细页、测试步骤页等；</li><li>根据公司自动化测试平台返回的测试结果进行图表化展示测试结果，方便用户能够更加直观的查看测试结果；</li><li>该项目是直接面向用户的产品，开发周期在两个月，测试一周，经过两个半月成功上线；</li><li>项目不停迭代，后续添加了历史对比、报表系统等新需求；</li></ul><h4 id="部分截图"><a href="#部分截图" class="headerlink" title="部分截图"></a>部分截图</h4><p><img src="/images/zuopin/1.png" alt=""><br><img src="/images/zuopin/2.png" alt=""><br><img src="/images/zuopin/3.png" alt=""><br><img src="/images/zuopin/4.png" alt=""><br><img src="/images/zuopin/5.png" alt=""></p><h2 id="2-手游测试报告"><a href="#2-手游测试报告" class="headerlink" title="2.手游测试报告"></a>2.手游测试报告</h2><p>演示地址：<strong><a href="https://comptest.testbird.com/frontend_zc/?config=eyJhbW91bnQiOiAwLCAiYnVzaW5lc3MiOiAiZ2FtZSIsICJhY2NlcHRfbGFuZ3VhZ2UiOiAiemgtY24iLCAibG9jYWxlIjogInpoX0NOIiwgInJlZ2lzdGVyX3R5cGUiOiAwLCAib3MiOiAiYW5kcm9pZCIsICJub19jYWNoZSI6IHRydWUsICJyZWdpc3Rlcl90eXBlX25hbWUiOiAiY29tbW9uIiwgInNlcnZlciI6ICJodHRwczovL2NvbXB0ZXN0LnRlc3RiaXJkLmNvbS9mcm9udGVuZF96Yy8ifQ%3D%3D#/report_v2/83d36733cb7f4f699d5b3f076d4ce049" target="_blank" rel="noopener">演示报告</a></strong></p><h4 id="选用vue框架进行重构原有项目，其主要优点在于："><a href="#选用vue框架进行重构原有项目，其主要优点在于：" class="headerlink" title="选用vue框架进行重构原有项目，其主要优点在于："></a>选用vue框架进行重构原有项目，其主要优点在于：</h4><blockquote><ul><li>简单易上手，官方文档较为完善，社区讨论可圈可点；</li></ul></blockquote><blockquote><ul><li>整洁的代码和模块，提高了编程效率；</li></ul></blockquote><blockquote><ul><li>脱胎于ng，没有过多复杂的逻辑；</li></ul></blockquote><blockquote><ul><li>可维护性高；</li></ul></blockquote><h4 id="重构效果"><a href="#重构效果" class="headerlink" title="重构效果"></a>重构效果</h4><blockquote><ul><li>优化H5标签，更富语义化；</li></ul></blockquote><blockquote><ul><li>代码项目结构更加轻便，便于阅读理解；</li></ul></blockquote><blockquote><ul><li>展示方面，数据通过vuex进行管理；</li></ul></blockquote><blockquote><ul><li>页面重新设计，更富表现形式；</li></ul></blockquote><blockquote><ul><li>渲染上比ng更高效；</li></ul></blockquote><h4 id="优化内容报告"><a href="#优化内容报告" class="headerlink" title="优化内容报告"></a>优化内容报告</h4><blockquote><ul><li>首次进入即写入相关信息至本地浏览器，使URL地址更为轻便简洁；</li></ul></blockquote><blockquote><ul><li>首页四大模块，报告关键数据一目了然，进入即可查看相关详情信息；</li></ul></blockquote><blockquote><ul><li>图表利用丰富，数据可视化更直观；</li></ul></blockquote><blockquote><ul><li>渲染更加高效，浏览速度提升明显，有效利用缓存，大幅降低减少请求时间；</li></ul></blockquote><blockquote><ul><li>结构更加清晰，层次分明，设计自带返回按钮，跳转更加方便；</li></ul></blockquote><blockquote><ul><li>快速问题定位，设备定位；</li></ul></blockquote><blockquote><ul><li>错误日志等级筛选正向筛选，单看一级更加方便；</li></ul></blockquote><h4 id="部分截图-1"><a href="#部分截图-1" class="headerlink" title="部分截图"></a>部分截图</h4><p><img src="/images/zuopin/7.png" alt=""><br><img src="/images/zuopin/8.png" alt=""><br><img src="/images/zuopin/9.png" alt=""></p><script>var _hmt = _hmt || [];(function() {  var hm = document.createElement("script");  hm.src = "https://hm.baidu.com/hm.js?cb26b3220fad854a3119dd8d11ddc6eb";  var s = document.getElementsByTagName("script")[0];   s.parentNode.insertBefore(hm, s);})();</script><script>var _hmt = _hmt || [];(function() {  var hm = document.createElement("script");  hm.src = "https://hm.baidu.com/hm.js?cb26b3220fad854a3119dd8d11ddc6eb";  var s = document.getElementsByTagName("script")[0];   s.parentNode.insertBefore(hm, s);})();</script>]]></content>
      
      <categories>
          
          <category> 作品 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作品 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数组的常用的API总结，绝对实用，处理数据更加快捷方便</title>
      <link href="/2018/10/20/arrApi/"/>
      <content type="html"><![CDATA[<p><img src="/images/arrAPI.png" alt=""></p><p>数组相关常用API,熟悉这些常用的API，在实际开发中能够提高很大的开发效率！<a id="more"></a></p><h3 id="1-遍历数组"><a href="#1-遍历数组" class="headerlink" title="1.遍历数组"></a>1.遍历数组</h3><p>arr.forEach(function (el,index,event) {<br>             console.log(el)//每一个元素<br>             console.log(index)//序号<br>             console.log(event)//数组本身<br>})</p><h3 id="2-数组过滤，"><a href="#2-数组过滤，" class="headerlink" title="2.数组过滤，"></a>2.数组过滤，</h3><p>.filter(回调函数);返回的是符合条件的筛选后的数据,组成的新数组  3个参数–数组元素、索引、该数组</p><pre><code>var arr=[10,20,30,40,50,60];var result=arr.filter(function(el,index,event){    return x&gt;30;});console.log(result);//result为返回满足条件的新数组</code></pre><h3 id="3-遍历数组，每个元素都满足条件，才返回true"><a href="#3-遍历数组，每个元素都满足条件，才返回true" class="headerlink" title="3.遍历数组，每个元素都满足条件，才返回true"></a>3.遍历数组，每个元素都满足条件，才返回true</h3><p>  every方法,每个元素都要满足条件才为true<br>        var arr=[100,200,300,400,500];<br>        var result=arr.every(function(x,y,z){<br>          return  x&gt;99;<br>        });<br>        console.log(result);</p><h3 id="4-遍历数组，只要有一个元素满足就返回true"><a href="#4-遍历数组，只要有一个元素满足就返回true" class="headerlink" title="4.遍历数组，只要有一个元素满足就返回true"></a>4.遍历数组，只要有一个元素满足就返回true</h3><pre><code>some方法,只要有一个元素满足条件就是true    var arr=[10,20,30,40,50];    var result=arr.some(function(x,y,z){         return x&gt;40;    });    console.log(result);</code></pre><h3 id="5-map方法-设置数组中的元素都执行一次函数-把新的数组存储在一个新的数组中"><a href="#5-map方法-设置数组中的元素都执行一次函数-把新的数组存储在一个新的数组中" class="headerlink" title="5.map方法,设置数组中的元素都执行一次函数,把新的数组存储在一个新的数组中"></a>5.map方法,设置数组中的元素都执行一次函数,把新的数组存储在一个新的数组中</h3><pre><code>var arr=[10,20,30,40,50];var result=arr.map(function(x,y,z){    return x*2;});console.log(result);//[20,40,60,80,100]</code></pre><h3 id="6-数组转字符串"><a href="#6-数组转字符串" class="headerlink" title="6.数组转字符串"></a>6.数组转字符串</h3><p> var arr=[“小明”,”小李”,”小王”,”小张”];<br> var result=arr.join(“,”);//可增加连接符<br> console.log(result);</p><h3 id="7-截取字符串-slice-开始索引-结束索引-截取原数组中的数据-然后组成一个新的数组"><a href="#7-截取字符串-slice-开始索引-结束索引-截取原数组中的数据-然后组成一个新的数组" class="headerlink" title="7.截取字符串  .slice(开始索引,结束索引);截取原数组中的数据,然后组成一个新的数组"></a>7.截取字符串  .slice(开始索引,结束索引);截取原数组中的数据,然后组成一个新的数组</h3><pre><code>var arr=[1,2,3,4,5,6,7,8,9];var result=arr.slice(0,5);   // 0到5之间（不包括5）console.log(result);</code></pre><script>var _hmt = _hmt || [];(function() {  var hm = document.createElement("script");  hm.src = "https://hm.baidu.com/hm.js?cb26b3220fad854a3119dd8d11ddc6eb";  var s = document.getElementsByTagName("script")[0];   s.parentNode.insertBefore(hm, s);})();</script><script>var _hmt = _hmt || [];(function() {  var hm = document.createElement("script");  hm.src = "https://hm.baidu.com/hm.js?cb26b3220fad854a3119dd8d11ddc6eb";  var s = document.getElementsByTagName("script")[0];   s.parentNode.insertBefore(hm, s);})();</script>]]></content>
      
      <categories>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>微信小程序入门（二）之常用语法</title>
      <link href="/2018/10/17/weChatTwo/"/>
      <content type="html"><![CDATA[<p><img src="/images/weChatcover2.png" alt=""></p><p>微信小程序中常用的组件、技巧、前后端请求数据等，这一章的学习便能开发一个简易的小程序。<br><a id="more"></a></p><h3 id="常用组件"><a href="#常用组件" class="headerlink" title="常用组件"></a>常用组件</h3><p>通过上一篇博客的学习，开发微信小程序的基本结构已经搭建好啦，现在可以开始编写代码，开始开发啦。</p><p><strong>view、text、image、input、radio</strong></p><p>这几个是比较常见的，用得比较多的组件，更多的组件可参考<a href="https://developers.weixin.qq.com/miniprogram/dev/component/" target="_blank" rel="noopener">官方文档</a>。</p><p>其实这些组件和HTML中的标签差不错，比如view就好比HTML中的div，text就好比span等等。</p><h3 id="获取js中数据"><a href="#获取js中数据" class="headerlink" title="获取js中数据"></a>获取js中数据</h3><p>如何从js中获取数据到页面中渲染，这是在开发中用得很多的。<br>微信中使用<br><strong>`{{}}`</strong><br>进行获取js中的数据，例如：<br>index.js:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">data</span>: &#123;</span><br><span class="line">  <span class="attribute">name</span>:<span class="string">'咕噜先森'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>index.wxml:<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><span class="template-variable">&#123;&#123;name&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><h3 id="获取前端页面中的数据"><a href="#获取前端页面中的数据" class="headerlink" title="获取前端页面中的数据"></a>获取前端页面中的数据</h3><p>例如获取input中输入的数据，使用bindinput绑定函数，并在函数中使用事件对象<strong>e.detail.value<br></strong>进行获取值。例如：<br>index.wxml:<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">'text'</span> bindinput=<span class="string">'getValue'</span>&gt;&lt;/<span class="built_in">input</span>&gt;</span><br></pre></td></tr></table></figure></p><p>index.js:<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getValue: <span class="function"><span class="keyword">function</span></span> (e) &#123;</span><br><span class="line">    console.<span class="built_in">log</span>(e.detail.<span class="keyword">value</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h3 id="设置数据"><a href="#设置数据" class="headerlink" title="设置数据"></a>设置数据</h3><p>对从前端页面获取到的值，怎样保存到数据中，供后面的逻辑使用。<br><strong>this.setData({})</strong><br>index.wxml:<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">'text'</span> bindinput=<span class="string">'getValue'</span>&gt;&lt;/<span class="built_in">input</span>&gt;</span><br></pre></td></tr></table></figure></p><p>index.js:<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span>: &#123;</span><br><span class="line">  <span class="keyword">name</span>:<span class="string">''</span>  </span><br><span class="line">&#125;,</span><br><span class="line">getValue: <span class="function"><span class="keyword">function</span></span> (e) &#123;</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      <span class="keyword">name</span>: e.detail.<span class="keyword">value</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h3 id="循环遍历数据"><a href="#循环遍历数据" class="headerlink" title="循环遍历数据"></a>循环遍历数据</h3><p>假如js中拿到的数据是一个数组，应该怎样将全部的数据渲染在页面中？<br><strong>wx:for</strong>,例如：（其中list为一个数组）</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;list&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">wx:key</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;goodsId&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"tr bg-g"</span> <span class="attr">wx:if</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;index % 2 == 0&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"td"</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.goodsId&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"td"</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.goodsName&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"td"</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.goodsPrice&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="绑定数据"><a href="#绑定数据" class="headerlink" title="绑定数据"></a>绑定数据</h3><p>在前端开发时，绑定是一个事件可以使用onclick等进行绑定，但是小程序不是这样使用的，而是使用<strong>bindtap</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">bindtap</span>=<span class="string">“submit”</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="向后台发送请求"><a href="#向后台发送请求" class="headerlink" title="向后台发送请求"></a>向后台发送请求</h3><p>前后端的数据交互，是在进行开发时不可缺少的，比如ajax进行请求，微信中使用<strong>wx.request</strong>进行请求。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">wx</span><span class="selector-class">.request</span>(&#123;</span><br><span class="line">     <span class="attribute">url</span>: <span class="string">'test.php'</span>, <span class="comment">//接口地址</span></span><br><span class="line">     <span class="attribute">data</span>: &#123;       <span class="comment">//发送的数据</span></span><br><span class="line">         <span class="attribute">name</span>:<span class="string">'咕噜先森'</span></span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attribute">header</span>: &#123;</span><br><span class="line">         <span class="string">'content-type'</span>: <span class="string">'application/json'</span>     <span class="comment">// 默认值</span></span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attribute">method</span>:<span class="string">'GET/POST'</span>,<span class="comment">//发送的方法</span></span><br><span class="line">     <span class="attribute">success</span>: function(res) &#123;<span class="comment">//请求成功调用的函数</span></span><br><span class="line">         console.log(res.data)</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attribute">fail</span>: function () &#123;<span class="comment">//请求失败调用的函数</span></span><br><span class="line">         console.log(<span class="string">"接口调用失败"</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><h3 id="其他常用结构"><a href="#其他常用结构" class="headerlink" title="其他常用结构"></a>其他常用结构</h3><ul><li><p>向数组中追加数据</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">arr</span><span class="selector-class">.push</span>()</span><br></pre></td></tr></table></figure></li><li><p>循环遍历数组</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(var <span class="built_in">i</span>=<span class="number">0</span>;<span class="built_in">i</span>&lt;arr.<span class="built_in">length</span>;<span class="built_in">i</span>++)&#123;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>循环对象</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> <span class="keyword">name</span> <span class="keyword">in</span> json)<span class="comment">&#123;  </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>到目前为止，小程序的基本的入门介绍完啦，后续会继续更出更多的分享或者小程序的实例。</p>]]></content>
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>微信小程序入门（一）之开发工具介绍</title>
      <link href="/2018/10/06/weChat/"/>
      <content type="html"><![CDATA[<p><img src="/images/weChatcover1.png" alt=""></p><h3 id="什么是小程序"><a href="#什么是小程序" class="headerlink" title="什么是小程序"></a>什么是小程序</h3><p>英文名 mini program,一种崭新的应用程式。2016年张小龙（微信创始人）提出微信应用号，当时他的描述是，小程序是一种不需要下载安装即可使用的应用，他实现了应用触手可及的梦想，用户扫一扫或者搜一下即可打开应用，也体现了用完即走的理念，用户不用关心是否安装太多应用的问题，应用无处不在，随时可用，但又无序安装卸载。因为苹果公司告了所以改名微信小程序。2017年年初，给用户开放了入口。但是只能企业，后面对个人开放了。目前比较火爆的微信小程序，跳一跳之类的。<a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener">官网：mp.weixin.qq.com</a><br><a id="more"></a></p><h3 id="录制视频（可全屏观看）"><a href="#录制视频（可全屏观看）" class="headerlink" title="录制视频（可全屏观看）"></a>录制视频（可全屏观看）</h3><p>本视频为随堂录制视频，与博客内容一致，若看博客不懂的可以看录制的视频。</p><iframe width="696" height="460" src="http://www.iqiyi.com/w_19rz1f5qpp.html" scrolling="no" frameborder="0" allowfullscreen></iframe><h3 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h3><p>PPT下载：<strong><a href="http://www.54whg.cn/resource/weChat.pptx" target="_blank" rel="noopener">PPT</a></strong><br>源码下载：<strong><a href="http://www.54whg.cn/resource/weChat.zip" target="_blank" rel="noopener">商品收银系统源码下载</a></strong></p><h3 id="开发准备工作"><a href="#开发准备工作" class="headerlink" title="开发准备工作"></a>开发准备工作</h3><p>注册小程序账号，利用微信号注册即可，注册地址为：<a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener">戳这儿</a></p><p>小程序开发者工具下载，下载地址为：<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html" target="_blank" rel="noopener">戳这儿</a></p><h3 id="开发工具介绍"><a href="#开发工具介绍" class="headerlink" title="开发工具介绍"></a>开发工具介绍</h3><p><img src="/images/weChat.png" alt="weChat"></p><p>开发者工具分为四个部分：模拟器，编辑器，调试器，工具栏</p><ul><li><p>模拟器：当我们保存了编辑的代码，就可以直接在模拟器中看到效果</p></li><li><p>编辑器：小程序所有的开发代码都可以在这里修改。</p></li><li><p>调试器：继承了许多调试小程序需要的功能</p></li><li><p>工具栏：用于编译，预览小程序的源代码</p></li></ul><h3 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h3><ul><li>1、选择在本地创建的项目目录</li><li>2、填写AppID<ul><li>查找AppID，登录小程序官网<a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener">官网：mp.weixin.qq.com</a>-&gt;设置-&gt;开发设置-&gt;AppID</li></ul></li></ul><h3 id="项目目录介绍"><a href="#项目目录介绍" class="headerlink" title="项目目录介绍"></a>项目目录介绍</h3><p> |–pages</p><pre><code>|--每个页面(index)    //在pages文件夹中，每一个页面都是有个文件夹    index.js    index.wxml    index.wxss        index.json   |--utilsapp.jsapp.jsonapp.wxssproject.config.json   //工程配置文件 描述整个项目的参数</code></pre><ul><li>1、pages:放所有页面的文件夹，此目录下的每一个文件夹代表一个页面，那咱们的项目两个页面就两个文件夹</li></ul><ul><li><p>2、每个页面包含四个文件</p><pre><code>.wxml文件是界面文件，  ----&gt;html.js是事件交互文件，用于处理界面的点击事件等功能；  ---&gt;js.wxss为界面美化文件，让界面显示的更加美观；  ---&gt;css.json为配置文件，用于修改导航栏显示样式等，小程序每个页面必须有.wxml和.js文件，其他两种类型的文件可以不需要。</code></pre></li><li><p>3、util：该文件件主要用于存放全局的一些.js文件，公共用到的一些事件处理代码文件可以放到该文件夹下，</p><pre><code>用于全局调用。</code></pre></li><li><p>4、app.js : 系统的方法处理文件，主要处理程序的声明周期的一些方法；例如：程序刚开始运行时事件处理等</p></li><li><p>5、app.json : 系统全局配置文件，设置导航头的颜色，字体大小，下面有没有tabbar等功能，具体页面的配置在页面的json文件中单独修改；</p></li><li><p>6、app.wxss : 全局的界面美化代码</p></li><li><p>7、project.config.json 通常大家在使用一个工具的时候，都会针对各自喜好做一些个性化配置，例如界面颜色、编译配置等等，当你换了另外一台电脑重新安装工具的时候，你还要重新配置.考虑到这点，小程序开发者工具在每个项目的根目录都会生成一个 project.config.json，</p></li></ul><h3 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h3><p>App() 注册一个小程序，整个的app在整个小程序里面只会调用一次，整体是一个app，app下面有很多page，在这个app里面配置的东西，在每个页面都可以使用</p><p>onLaunch 函数类型 声明周期函数-监听小程序初始化，全局只会触发一次</p><p>globalData：全局的数据</p><h3 id="app-json"><a href="#app-json" class="headerlink" title="app.json"></a>app.json</h3><p>pages 接受一个数组，每一项都是字符串，来指定小程序由哪些页面组成。每一项代表对应页面的[路径+文件名]<br>信息，数组的第一项代表小程序的初始页面。小程序中新增/减少页面，都需要对 pages 数组进行修改。</p><p>注：文件名不需要写文件后缀，因为框架会自动去寻找路径下 .json, .js, .wxml, .wxss四个文件进行整合。 如果添加后缀报错。</p><p>windows 小程序所有页面的顶部背景颜色，文字颜色定义在这里的</p><p>“backgroundTextStyle”:”light”, //下拉 loading 的样式，仅支持 dark/light</p><p>“navigationBarBackgroundColor”: “#fff”, //导航栏背景颜色，如”#000000”  颜色值最好不要写单词，十六进制也不要简写</p><p>“navigationBarTitleText”: “WeChat”, //导航栏标题文字内容</p><p>“navigationBarTextStyle”:”black” //导航栏标题颜色，仅支持 black/white</p><h3 id="Page配置"><a href="#Page配置" class="headerlink" title="Page配置"></a>Page配置</h3><p> “pages”:[<br>    “pages/index/index”,<br>    “pages/center/center”<br>  ],<br>    在tabBar里面进行设置的路由，将会固定在页面的底部。</p><h3 id="头部配置"><a href="#头部配置" class="headerlink" title="头部配置"></a>头部配置</h3><p>  “window”:{<br>    “backgroundTextStyle”:”light”,<br>    “navigationBarBackgroundColor”: “#fff”,<br>    “navigationBarTitleText”: “WeChat”,<br>    “navigationBarTextStyle”:”black”<br>  }</p><h3 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h3><p>“tabBar”: {<br>    “list”: [<br>      {<br>        “pagePath”: “pages/index/index”,<br>        “text”: “首页”,<br>        “iconPath”:”img/index.png”,  //默认的图标<br>        “selectedIconPath”:”img/linghtZB.png” //选中后的图标<br>      },<br>      {<br>        “pagePath”: “pages/center/center”,<br>        “text”: “个人中心”,<br>        “iconPath”: “img/center.png”,<br>        “selectedIconPath”: “img/center.png”<br>      }<br>    ]<br>  }</p><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>微信小程序的介绍以及小程序开发工具以及具体的配置信息都已经分享完了，了解了这些就可以开始小程序的开发啦。常用的标签及语法见下一期博客啦^_^</p><script>var _hmt = _hmt || [];(function() {  var hm = document.createElement("script");  hm.src = "https://hm.baidu.com/hm.js?cb26b3220fad854a3119dd8d11ddc6eb";  var s = document.getElementsByTagName("script")[0];   s.parentNode.insertBefore(hm, s);})();</script>]]></content>
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>封装 | Node连接MySQL并封装其增删查改</title>
      <link href="/2018/05/17/node-mysql/"/>
      <content type="html"><![CDATA[<p><img src="/images/node-mysql.png" alt=""></p><h3 id="Node连接Mysql"><a href="#Node连接Mysql" class="headerlink" title="Node连接Mysql"></a>Node连接Mysql</h3><p>说到node，可能大家会想到MOngoDB作为数据库，这里将会介绍node与mysql的连接，并分享了封装好的实例代码，在项目开发中可直接使用。下一篇博客将会讲node连接MongoDB。<br><a id="more"></a></p><h3 id="安装Mysql模块"><a href="#安装Mysql模块" class="headerlink" title="安装Mysql模块"></a>安装Mysql模块</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> mysql</span><br></pre></td></tr></table></figure><h3 id="连接Mysql"><a href="#连接Mysql" class="headerlink" title="连接Mysql"></a>连接Mysql</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> connection = mysql.createConnection(&#123;</span><br><span class="line">    host : <span class="string">'localhost'</span>,</span><br><span class="line">    user : <span class="string">'root'</span>, </span><br><span class="line">    password : <span class="string">'password'</span>,</span><br><span class="line">    database : <span class="string">'test'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">connection.connect(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'连接失败: '</span> + err.stack);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'连接成功 id '</span> + connection.threadId);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>host：连接的服务器<br>user：数据库用户名<br>password：设置的MySQL密码<br>database： 要连接的数据库名</p><h3 id="常用的SQL语句"><a href="#常用的SQL语句" class="headerlink" title="常用的SQL语句"></a>常用的SQL语句</h3><p>具体的使用这里不做详细说明，包括select、insert、update、delete等语句。</p><h3 id="Node操作Mysql"><a href="#Node操作Mysql" class="headerlink" title="Node操作Mysql"></a>Node操作Mysql</h3><p>查询</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">connection.<span class="keyword">query</span>('SELECT * FROM t_user WHERE username = <span class="string">"whg"</span>', (<span class="keyword">err</span>, results, fields) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">err</span>)&#123;</span><br><span class="line">        console.<span class="built_in">log</span>(<span class="keyword">err</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    console.<span class="built_in">log</span>(results);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>添加</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">connection.query(<span class="string">'INSERT INTO t_user(username, pass) VALUES(?, ?)'</span>,[<span class="string">'whg'</span>, <span class="string">'123'</span>], <span class="function"><span class="params">(err, results)</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(results);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>删除</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">connection.query(<span class="string">'DELETE FROM t_user  WHERE id = 1'</span>, <span class="function"><span class="params">(err, results)</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(results);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>更新</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">connection.<span class="keyword">query</span>('<span class="keyword">UPDATE</span> t_user <span class="keyword">SET</span> pass = <span class="string">"321"</span> WHERE username = <span class="string">"whg"</span>', (<span class="keyword">err</span>, results) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">err</span>)&#123;</span><br><span class="line">        console.<span class="built_in">log</span>(<span class="keyword">err</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    console.<span class="built_in">log</span>(results);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>结束连接</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">connection.<span class="keyword">end</span>(<span class="function"><span class="keyword">function</span><span class="params">(err)</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">  </span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span>);</span></span><br><span class="line">connection.destroy();</span><br></pre></td></tr></table></figure><p>这两种都行，第二种是强制结束。</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>说了这么多，感觉操作起来还是挺简单的。在实际开发中，我们想要操作起来更方便，那就让我们自己封装一下来使用。直接上代码：</p><h5 id="封装好的代码"><a href="#封装好的代码" class="headerlink" title="封装好的代码"></a>封装好的代码</h5><p>1.数据库配置文件<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置链接数据库参数</span></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    <span class="string">host :</span> <span class="string">'localhost'</span>,</span><br><span class="line">    <span class="string">port :</span> <span class="number">3306</span>,<span class="comment">//端口号</span></span><br><span class="line">    <span class="string">database :</span> <span class="string">'nodetest'</span>,<span class="comment">//数据库名</span></span><br><span class="line">    <span class="string">user :</span> <span class="string">'root'</span>,<span class="comment">//数据库用户名</span></span><br><span class="line">    <span class="string">password :</span> <span class="string">'123456'</span><span class="comment">//数据库密码</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>2.封装、暴露方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);<span class="comment">//引入mysql模块</span></span><br><span class="line"><span class="keyword">var</span> databaseConfig = <span class="built_in">require</span>(<span class="string">'./mysql.config'</span>);  <span class="comment">//引入数据库配置模块中的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//向外暴露方法</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    query : <span class="function"><span class="keyword">function</span>(<span class="params">sql,params,callback</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//每次使用的时候需要创建链接，数据操作完成之后要关闭连接</span></span><br><span class="line">        <span class="keyword">var</span> connection = mysql.createConnection(databaseConfig);        </span><br><span class="line">        connection.connect(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'数据库链接失败'</span>);</span><br><span class="line">                <span class="keyword">throw</span> err;</span><br><span class="line">            &#125;</span><br><span class="line">         <span class="comment">//开始数据操作</span></span><br><span class="line">         <span class="comment">//传入三个参数，第一个参数sql语句，第二个参数sql语句中需要的数据，第三个参数回调函数</span></span><br><span class="line">        connection.query( sql, params, <span class="function"><span class="keyword">function</span>(<span class="params">err,results,fields </span>)</span>&#123;</span><br><span class="line">           <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'数据操作失败'</span>);</span><br><span class="line">                <span class="keyword">throw</span> err;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将查询出来的数据返回给回调函数</span></span><br><span class="line">            callback &amp;&amp; callback(results, fields);</span><br><span class="line">            <span class="comment">//results作为数据操作后的结果，fields作为数据库连接的一些字段</span></span><br><span class="line">            <span class="comment">//停止链接数据库，必须再查询语句后，要不然一调用这个方法，就直接停止链接，数据操作就会失败</span></span><br><span class="line">             connection.end(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">                  <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                      <span class="built_in">console</span>.log(<span class="string">'关闭数据库连接失败！'</span>);</span><br><span class="line">                      <span class="keyword">throw</span> err;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;);</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>3.演示实例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db=<span class="built_in">require</span>(<span class="string">'../model/mysql.js'</span>);</span><br><span class="line"><span class="comment">// 查询实例</span></span><br><span class="line">db.query(<span class="string">'select * from t_user'</span>, [],<span class="function"><span class="keyword">function</span>(<span class="params">result,fields</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'查询结果：'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//添加实例</span></span><br><span class="line"><span class="keyword">var</span>  addSql = <span class="string">'INSERT INTO websites(username,password) VALUES(?,?)'</span>;</span><br><span class="line"><span class="keyword">var</span>  addSqlParams =[<span class="string">'咕噜先森'</span>, <span class="string">'666'</span>];</span><br><span class="line">db.query(addSql,addSqlParams,<span class="function"><span class="keyword">function</span>(<span class="params">result,fields</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'添加成功'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>想要使用的朋友，可以直接把封装好的两个文件copy到项目中，改一下配置就可以使用了，大大提高开发效率。下一篇将会分享Node连接MongoDB。</p><script>var _hmt = _hmt || [];(function() {  var hm = document.createElement("script");  hm.src = "https://hm.baidu.com/hm.js?cb26b3220fad854a3119dd8d11ddc6eb";  var s = document.getElementsByTagName("script")[0];   s.parentNode.insertBefore(hm, s);})();</script>]]></content>
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【零开始】怎样购买、配置服务器及发布网站（页）？</title>
      <link href="/2018/05/15/webService/"/>
      <content type="html"><![CDATA[<p><img src="/images/tencentService/Serverlogo.png" alt=""><br>本文主要讲解从<strong>零开始</strong>搭建属于自己的服务器，<strong>购买==&gt;配置==&gt;发布</strong>，这么一系列详细流程，让自己做的网页能够发布到网络上，一起来开启服务器之旅！<a id="more"></a>本文主要以腾讯云学生套餐进行讲解，其他的云服务器操作类似。若对你有帮助的话，希望能够坚持做下去。</p><p>本文原创首发：<a href="http://blog.54whg.cn/" target="_blank" rel="noopener">咕噜先森的博客</a></p><h4 id="购买服务器"><a href="#购买服务器" class="headerlink" title="购买服务器"></a>购买服务器</h4><p>服务器目前使用得最多的是阿里云和腾讯云，用起比较稳定。这里讲解的是腾讯云，其实很多浏览器的配置和使用都差不多。这里演示的是腾讯云的学生套餐，作为学生狗，在校期间用用免费的就行。<br>进入<a href="https://cloud.tencent.com/act/campus?fromSource=gwzcw.594708.594708.594708" target="_blank" rel="noopener">腾讯云云+校园服务计划</a>，选择【体验版】(PS:每日零点开始抢，每天100个名额，限额抢购，抢！抢！)套餐，10元/月。<br><img src="/images/tencentService/xs1.png" alt=""></p><h4 id="选择配置"><a href="#选择配置" class="headerlink" title="选择配置"></a>选择配置</h4><p>腾讯云免费学生套餐 【1核2G，1M带宽 50G云硬盘】，这是腾讯云学生套餐默认的配置，不能进行选择。<br>接下来选择服务器其他的配置选项：</p><ul><li><p>地域：即服务器的位置。选择离访问者比较近的服务器的区域就行，越近的话访问的速度相对会快一点。【例如：成都】</p></li><li><p>可用区：根据地域进行选择就行，问题不大。【例如：成都一区】</p></li><li><p>操作系统：有Linux、Windows等系统，Linux又包括不同的版本：CentOS、Debian、Ubuntu等。选择一个自己熟悉的系统就行。【例如：Windows Server】</p></li><li><p>系统版本：根据你选择的操作系统进行选择适合自己的版本。【例如：Windows Server 2012 R2 标准版 64位中文版】</p></li><li><p>购买时长：选择一个月，因为腾讯云的学生套餐的优惠券是每个月进行领取，所以只能一个月一个月进行购买。</p></li><li><p>对象存储：使用默认的50G就好。</p></li><li><p>域名服务：第一年免费使用.cn域名。若自己有域名，可以选择【否】，若没有可以选择【是】，然后输入一个自己想要的域名，但是这个域名必须是全球唯一的，所以可能你想要的域名已经被注册了，那么你就只能注册其他的域名了。<br><img src="/images/tencentService/xs2.png" alt=""><br><img src="/images/tencentService/xs3.png" alt=""></p><h4 id="核对信息"><a href="#核对信息" class="headerlink" title="核对信息"></a>核对信息</h4><p>核对信息，查看自己的购买的配置是否是自己需要的配置。支付完订单，那么你的服务器就已经到手了，就可以开始撸自己的服务器了。<br><img src="/images/tencentService/xs4.png" alt=""></p><h4 id="查看服务器"><a href="#查看服务器" class="headerlink" title="查看服务器"></a>查看服务器</h4><p>那么如何查看自己已经买好的服务器呢。登录腾讯云，进入控制台管理，点击导航栏【云产品】==&gt;【云服务器】==&gt;【云主机】，便能查看自己的云主机啦。<br><img src="/images/tencentService/xs5.png" alt=""><br><img src="/images/tencentService/xs6.png" alt=""><br>此处可以查看云主机的各种状态以及一些操作，其中可以查看自己的公网IP和内网IP。</p><h4 id="服务器备案与域名解析"><a href="#服务器备案与域名解析" class="headerlink" title="服务器备案与域名解析"></a>服务器备案与域名解析</h4><p>严格意义上来讲域名备案的目的就是为了防止在网上从事非法的网站经营活动，打击不良互联网信息的传播，如果网站不备案的话，7天后将会关停服务器，导致不能正常使用。目前国内的所有服务器都需要进行备案。<br>在这里，直接引用腾讯云给出的<strong><a href="https://cloud.tencent.com/document/product/243/655" target="_blank" rel="noopener">备案官方文档</a></strong>，很详细，参照着备案就行，从开始备案到完成的时间可能在20天左右。<br>域名解析即将域名与IP绑定起来，通过DNS解析，便能通过域名访问IP对应的网站。<br>详细的域名解析见<strong><a href="https://blog.csdn.net/j_mani/article/details/70257216" target="_blank" rel="noopener">这篇博客</a></strong><br><strong>PS：《服务器备案与域名解析》这一步可以先跳过，把后面的步骤全部搞通了再来处理这一模块也是可以的。</strong></p><h4 id="登录云主机"><a href="#登录云主机" class="headerlink" title="登录云主机"></a>登录云主机</h4><p>登录云主机便可以操作整个云服务，并配置成你想要的样子。<br>点击【登录】便可查看如何进行登录，根据不同的系统选择不同的登录方式。<br><strong>登录步骤（Windows）：</strong></p></li><li><p>快捷键【win+R】，输入“mstsc”命令，打开远程桌面对话框。</p></li><li><p>输入框输入云主机的公网IP地址，点击连接。</p></li><li><p>输入默认的用户名【Administrator】，同时输入自己购买服务器时设置的密码，点击确定便能连接到远程桌面。</p></li><li><p>注意：连接时记得在网速好的时候，否则可能带不动导致连接不上。<br><img src="/images/tencentService/xs7.png" alt=""><br><img src="/images/tencentService/xs8.png" alt=""><br>进入云主机过后，大家会发现和我们平时使用的Windows没什么区别，操作起来就简单多了。</p><h4 id="开启服务器"><a href="#开启服务器" class="headerlink" title="开启服务器"></a>开启服务器</h4><p>好了，到了这一步离成功已经很近了。怎样才能让我们的服务器跑起来，能够运行我们自己写的网页或者网站。那么你需要准备下面这个软件——PHPStudy，其实开启服务器的很多，比如Tomcat，只是这里是使用PHPStudy进行演示。<br><strong><a href="http://www.phpstudy.net/" target="_blank" rel="noopener">PHPStudy下载地址</a></strong>，下载后进行傻瓜式的安装即可。<br>安装好后，正常启动服务器的效果如下图所示(即前面是绿色小圆点而不是红色小圆点)。<br><img src="/images/tencentService/xs21.png" alt=""><br>这里我们只需要管Apache即可，不用管Mysql，当然若你的项目需要数据库，那么肯定是需要进行相关配置的。Apache默认端口为80，若不使用80端口的话，那么在使用ip地址或者域名访问的时候需要在其后添加端口号。MySQL默认端口为3306。<br>若不能正常启动，说明端口被占用，这是需要终止其他占用该端口的进程即可。<br>启动过后，需要简单的配置一下端口及目录。<br>操作步骤：点击【其他选项菜单】==&gt;【打开配置文件】==&gt;【vhosts-conf】<br>此时打开应该是空的，只需要把下面的配置添加进去即可。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;VirtualHost _default_:80&gt;</span></span><br><span class="line"><span class="attribute"><span class="nomarkup">DocumentRoot</span></span> <span class="string">"C:\phpstudy\WWW"</span>   </span><br><span class="line">  <span class="section">&lt;Directory "C:\phpstudy\WWW"&gt;</span></span><br><span class="line">    <span class="attribute"><span class="nomarkup">Options</span></span> +Indexes +FollowSymLinks +ExecCGI</span><br><span class="line">    <span class="attribute">AllowOverride</span> <span class="literal">All</span></span><br><span class="line">    <span class="attribute"><span class="nomarkup">Order</span></span> allow,deny</span><br><span class="line">    <span class="attribute"><span class="nomarkup">Allow</span></span> from <span class="literal">all</span></span><br><span class="line">    <span class="attribute">Require</span> <span class="literal">all</span> granted</span><br><span class="line">  <span class="section">&lt;/Directory&gt;</span></span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="/images/tencentService/xs25.png" alt=""><br>PS：记得修改自己的根目录的位置。<br>那么我的网页应该放在哪个文件夹下才能被访问呢？这时需要打开网站的根目录。<br>打开根目录的步骤:点击【其他选项菜单】==&gt;点击【网站根目录】，如下图所示：<br><img src="/images/tencentService/xs22.png" alt=""><br>打开后的文件夹便是网站的根目录，这时文件夹中有一些文件是PHPAdmin的一些文件，这时在浏览器地址栏中输入localhost或者127.0.0.1便能访问到PHPAdmin的主页，到此说明phpstudy能够正常开启服务了。<br><img src="/images/tencentService/xs23.png" alt=""><br>以后上传的网页就需要上传到这个文件夹下，就能正常访问了。<br>若在当前目录有index.html，那么直接访问ip地址或者域名，打开的网页便是默认的index.html。如想访问非默认缺省主页，需要在ip或域名后添加该文件的相对路径。</p><p>【例如】在WWW下有一个文件夹aaa中有一个文件aaa.html,那么这时候需要在浏览器地址栏中输入ip地址/aaa/aaa.html（119.149.78.109/aaa/aaa.html）<br>配置好后，你的服务器便跑起来了，你便能访问你配置好的目录下的网页了，同时也可以使用ip地址进行访问。</p><p>这里只做了简单的开启服务器的功能，更多详细的关于phpstudy的使用可参考<strong><a href="http://www.php.cn/phpstudy-377909.html" target="_blank" rel="noopener">官网</a></strong>给出的一篇文章</p><h4 id="如何上传文件到服务器"><a href="#如何上传文件到服务器" class="headerlink" title="如何上传文件到服务器"></a>如何上传文件到服务器</h4><p>所有的环境都搭好了，那么应当怎样将我们自己做好的网页放在服务器上呢？这里讲解三种方法供读者参考，读者可选择适合自己的方法。</p><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>想必大家都使用过ftp进行上传文件，对，这里就是需用ftp进行上传文件。那么上传之前你需要做一个准备工作，那就是在云服务器上配置ftp。这里需要在云主机上安装一个软件【FileZilla Server】，<a href="https://filezilla-project.org/download.php?type=server" target="_blank" rel="noopener">官网下载地址</a>。安装方式也是和phpstudy一致，傻瓜式安装即可。<br>安装好后，打开软件点击【File】启动FileZilla Server。<br><img src="/images/tencentService/xs9.png" alt=""></p><ul><li>设置ftp账号<br>点击【Edit】==&gt;【Users】<br><img src="/images/tencentService/xs10.png" alt=""><br>点击【Add】按钮进行添加账户，同时填写账户的名称【例如：test】<br><img src="/images/tencentService/xs12.png" alt=""></li><li>设置密码<br>在【Password】选项前打勾，并输入密码即可。<br><img src="/images/tencentService/xs13.png" alt=""></li><li>选择共享的文件夹<br>如下图所示，点击【1】==&gt;点击【Add】选择想要共享的文件夹，这里可直接选择phpstudy的根目录，这样上传的文件夹可直接访问。图中第3步便是设置这个添加的账户对当前目录的文件和文件夹的权限，有增、删、改、查，可根据需求进行设置，若是自己使用可全部勾选上。<br><img src="/images/tencentService/xs14.png" alt=""><br>后面两项可以不用设置，直接使用默认的即可。<br><img src="/images/tencentService/xs15.png" alt=""></li></ul><p>到此为止，云服务器上的ftp已经配置完成，现在可直接在本机电脑上通过ftp软件或者资源管理器使用刚刚设置好的用户和密码进行登录，然后便能上传文件了。<br>例如使用【资源管理器】进行登录上传。<br>打开【我的电脑】，在地址栏中输入：【ftp:IP地址】，这时会弹出一个登录框，要求输入账号和密码，输入刚刚添加的账号和密码即可。<br><img src="/images/tencentService/xs16.png" alt=""><br>这时便登录进来了，直接把要上传的文件拖进来或者复制进来就能完成上传了。<br>例如上传一个hello.html文件到服务器，直接把hello.html拖拽进去或者复制进去就OK了。<br>下图是为上传hello.html之前的情况：<br><img src="/images/tencentService/xs17.png" alt=""><br>下图是为上传完成hello.html的情况：<br><img src="/images/tencentService/xs18.png" alt=""><br>这时，我们在云服务器上打开对应的那个目录，便能查看到刚刚那个hello.html文件了。<br><img src="/images/tencentService/xs19.png" alt=""><br>这时我们在浏览器地址栏中输入IP地址+hello.html便能访问到hello.html文件中的内容了。<br><img src="/images/tencentService/xs20.png" alt=""><br>这种方法是使用得比较多的，当然使用ftp软件是一样的，只要配置好后使用起来还是很简单的。</p><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>登录进入云服务器过后，直接通过复制粘贴进行上传文件。但是有一个弊端是，若文件过大很容易造成上传失败。</p><h5 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h5><p>在云服务器中直接绑定本机电脑上的某一个磁盘，这样就可以将本机的文件绑定在云服务器上，再通过复制粘贴便能轻松完成文件的上传。</p><h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>通过这些详细的步骤，我相信你已经从零搭建起自己的服务器了，享受了这么一个过程。过程很重要，当然结果做出来了还是很有成就感的。<br>当然，由于作者一个人经历、水平也有限，本文中肯定有一些错误，很希望大家提出意见与建议，可以在文末进行留言，作者将会进一步进行改进。<br>码字也不容易啦，如果你觉得本文对自己有帮助，可以在博客文章下面<strong>打赏</strong>一点棒棒糖零花钱，多少随意啦^_*_^</p><script>var _hmt = _hmt || [];(function() {  var hm = document.createElement("script");  hm.src = "https://hm.baidu.com/hm.js?cb26b3220fad854a3119dd8d11ddc6eb";  var s = document.getElementsByTagName("script")[0];   s.parentNode.insertBefore(hm, s);})();</script>]]></content>
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【算法详解】冒泡/选择/插入/快速排序详解·JS实现</title>
      <link href="/2018/04/19/sort/"/>
      <content type="html"><![CDATA[<p><img src="/images/sort.jpg" alt=""></p><p>最近再深入了解了一下排序算法，大概总结了一下，直接在代码中一行一行的进行注释。<br>算法思路==&gt;实现代码==&gt;代码详细注释==&gt;演示过程，带来更加直观的理解。<br>所有的代码可直接运行，查看结果。<br><a id="more"></a></p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;冒泡排序&lt;<span class="string">/title</span>&gt;</span><br><span class="line">&lt;<span class="string">/head</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="string">//swap</span>是交换数组内位置的函数</span><br><span class="line">        function swap<span class="params">(_arr, index1, index2)</span> &#123;</span><br><span class="line">            const arr = _arr;</span><br><span class="line">            arr[index1] += arr[index2];</span><br><span class="line">            arr[index2] = arr[index1] - arr[index2];</span><br><span class="line">            arr[index1] -= arr[index2];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="string">//</span> 基本思路：</span><br><span class="line"></span><br><span class="line">        <span class="string">//</span> 前一项<span class="params">(i)</span>与后一项<span class="params">(i+1)</span>项比较，如果前一项比后一项大就交换这两项；</span><br><span class="line">        <span class="string">//</span> 重复这个过程到最后；</span><br><span class="line">        <span class="string">//</span> 一趟完成后再从头开始重复上面的步骤，有多少项就要重复几次。</span><br><span class="line">        function bubbleSort<span class="params">(_arr)</span> &#123;</span><br><span class="line">            const arr = []<span class="string">.slice.call</span><span class="params">(_arr)</span>;</span><br><span class="line">            const len = arr.length;</span><br><span class="line">            for <span class="params">(let <span class="attr">i</span> = 0; i &lt; len; i += 1)</span> &#123;</span><br><span class="line">                for <span class="params">(let <span class="attr">f</span> = 0; f &lt; len - 1; f += 1)</span> &#123;</span><br><span class="line">                    <span class="string">//</span> 相邻两个元素进行比较</span><br><span class="line">                    <span class="keyword">if</span> <span class="params">(arr[f] &gt; arr[f + 1])</span> &#123;</span><br><span class="line">                        <span class="string">//</span> 交换位置</span><br><span class="line">                        swap<span class="params">(arr, f, f + 1)</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return arr;</span><br><span class="line">        &#125;</span><br><span class="line">        console.log<span class="params">(bubbleSort([2, 5, 4, 7, 3])</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="string">//</span> 演示过程</span><br><span class="line">        <span class="string">//</span> <span class="string">//</span> 初始</span><br><span class="line">        <span class="string">//</span> 5 4 9 5 3</span><br><span class="line"></span><br><span class="line">        <span class="string">//</span> <span class="string">//</span> 第一趟</span><br><span class="line">        <span class="string">//</span> 4 5 9 5 3  <span class="string">//</span> 5&gt;4，交换</span><br><span class="line">        <span class="string">//</span> ^ ^</span><br><span class="line">        <span class="string">//</span> 4 5 9 5 3  <span class="string">//</span> 5&lt;9，不变</span><br><span class="line">        <span class="string">//</span>   ^ ^</span><br><span class="line">        <span class="string">//</span> 4 5 5 9 3  <span class="string">//</span> 9&gt;5，交换</span><br><span class="line">        <span class="string">//</span>     ^ ^</span><br><span class="line">        <span class="string">//</span> 4 5 5 3 9  <span class="string">//</span> 9&gt;3，交换</span><br><span class="line">        <span class="string">//</span>       ^ ^</span><br><span class="line"></span><br><span class="line">        <span class="string">//</span> <span class="string">//</span> 第二趟</span><br><span class="line">        <span class="string">//</span> 4 5 5 3 9  <span class="string">//</span> 4&lt;5，不变</span><br><span class="line">        <span class="string">//</span> ^ ^</span><br><span class="line">        <span class="string">//</span> 4 5 5 3 9  <span class="string">//</span> 5=5，不变</span><br><span class="line">        <span class="string">//</span>   ^ ^</span><br><span class="line">        <span class="string">//</span> 4 5 3 5 9  <span class="string">//</span> 5&gt;3，交换</span><br><span class="line">        <span class="string">//</span>     ^ ^</span><br><span class="line">        <span class="string">//</span> 4 5 3 5 9  <span class="string">//</span> 5&lt;9，不变</span><br><span class="line">        <span class="string">//</span>       ^ ^</span><br><span class="line"></span><br><span class="line">        <span class="string">//</span> <span class="string">//</span> 第三趟</span><br><span class="line">        <span class="string">//</span> 4 5 3 5 9  <span class="string">//</span> 4&lt;5，不变</span><br><span class="line">        <span class="string">//</span> ^ ^</span><br><span class="line">        <span class="string">//</span> 4 3 5 5 9  <span class="string">//</span> 5&gt;3，交换</span><br><span class="line">        <span class="string">//</span>   ^ ^</span><br><span class="line">        <span class="string">//</span> 4 3 5 5 9  <span class="string">//</span> 5=5，不变</span><br><span class="line">        <span class="string">//</span>     ^ ^</span><br><span class="line">        <span class="string">//</span> 4 3 5 5 9  <span class="string">//</span> 5&lt;9，不变</span><br><span class="line">        <span class="string">//</span>       ^ ^</span><br><span class="line"></span><br><span class="line">        <span class="string">//</span> <span class="string">//</span> 第四趟</span><br><span class="line">        <span class="string">//</span> 3 4 5 5 9  <span class="string">//</span> 4&gt;3，交换</span><br><span class="line">        <span class="string">//</span> ^ ^</span><br><span class="line">        <span class="string">//</span> 3 4 5 5 9  <span class="string">//</span> 4&lt;5，不变</span><br><span class="line">        <span class="string">//</span>   ^ ^</span><br><span class="line">        <span class="string">//</span> 3 4 5 5 9  <span class="string">//</span> 5=5，不变</span><br><span class="line">        <span class="string">//</span>     ^ ^</span><br><span class="line">        <span class="string">//</span> 3 4 5 5 9  <span class="string">//</span> 5&lt;9，不变</span><br><span class="line">        <span class="string">//</span>       ^ ^</span><br><span class="line"></span><br><span class="line">        <span class="string">//</span> <span class="string">//</span> 第五趟</span><br><span class="line">        <span class="string">//</span> 3 4 5 5 9  <span class="string">//</span> 3&lt;4，不变</span><br><span class="line">        <span class="string">//</span> ^ ^</span><br><span class="line">        <span class="string">//</span> 3 4 5 5 9  <span class="string">//</span> 4&lt;5，不变</span><br><span class="line">        <span class="string">//</span>   ^ ^</span><br><span class="line">        <span class="string">//</span> 3 4 5 5 9  <span class="string">//</span> 5=5，不变</span><br><span class="line">        <span class="string">//</span>     ^ ^</span><br><span class="line">        <span class="string">//</span> 3 4 5 5 9  <span class="string">//</span> 5&lt;9，不变</span><br><span class="line">        <span class="string">//</span>       ^ ^</span><br><span class="line"></span><br><span class="line">        <span class="string">//</span> <span class="string">//</span> 结果</span><br><span class="line">        <span class="string">//</span> 3 4 5 5 9</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="string">//</span>  改进方案</span><br><span class="line"></span><br><span class="line">        <span class="string">//</span> 通过上面的排序过程，可以发现其实每一趟就可以确定最后一位的位置了，</span><br><span class="line"></span><br><span class="line">        <span class="string">//</span> 所以可以不用再比较最后的位置。代码改造也很小，只要在内循环减去已经确定的位置数即可。</span><br><span class="line"></span><br><span class="line">        function modifiedBubbleSort<span class="params">(_arr)</span> &#123;</span><br><span class="line">            const arr = []<span class="string">.slice.call</span><span class="params">(_arr)</span>;</span><br><span class="line">            const len = arr.length;</span><br><span class="line">            for <span class="params">(let <span class="attr">i</span> = 0; i &lt; len; i += 1)</span> &#123;</span><br><span class="line">                <span class="string">//</span> 每一趟便能确定最后一个数，所以可以减少一些不必要的比较</span><br><span class="line">                for <span class="params">(let <span class="attr">f</span> = 0; f &lt; len - i - 1; f += 1)</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> <span class="params">(arr[f] &gt; arr[f + 1])</span> &#123;</span><br><span class="line">                        swap<span class="params">(arr, f, f + 1)</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return arr;</span><br><span class="line">        &#125;</span><br><span class="line">        console.log<span class="params">(modifiedBubbleSort([2, 5, 4, 7, 3])</span>)</span><br><span class="line"></span><br><span class="line">        <span class="string">//</span> 演示过程</span><br><span class="line">        <span class="string">//</span> 5 4 9 5 3</span><br><span class="line"></span><br><span class="line">        <span class="string">//</span> <span class="string">//</span> 第一趟</span><br><span class="line">        <span class="string">//</span> 4 5 9 5 3  <span class="string">//</span> 5&gt;4，交换</span><br><span class="line">        <span class="string">//</span> ^ ^</span><br><span class="line">        <span class="string">//</span> 4 5 9 5 3  <span class="string">//</span> 5&lt;9，不变</span><br><span class="line">        <span class="string">//</span>   ^ ^</span><br><span class="line">        <span class="string">//</span> 4 5 5 9 3  <span class="string">//</span> 9&gt;5，交换</span><br><span class="line">        <span class="string">//</span>     ^ ^</span><br><span class="line">        <span class="string">//</span> 4 5 5 3 9  <span class="string">//</span> 9&gt;3，交换</span><br><span class="line">        <span class="string">//</span>       ^ ^</span><br><span class="line"></span><br><span class="line">        <span class="string">//</span> <span class="string">//</span> 第二趟</span><br><span class="line">        <span class="string">//</span> 4 5 5 3 9  <span class="string">//</span> 4&lt;5，不变</span><br><span class="line">        <span class="string">//</span> ^ ^</span><br><span class="line">        <span class="string">//</span> 4 5 5 3 9  <span class="string">//</span> 5=5，不变</span><br><span class="line">        <span class="string">//</span>   ^ ^</span><br><span class="line">        <span class="string">//</span> 4 5 3 5 9  <span class="string">//</span> 5&gt;3，交换</span><br><span class="line">        <span class="string">//</span>     ^ ^</span><br><span class="line"></span><br><span class="line">        <span class="string">//</span> <span class="string">//</span> 第三趟</span><br><span class="line">        <span class="string">//</span> 4 5 3 5 9  <span class="string">//</span> 4&lt;5，不变</span><br><span class="line">        <span class="string">//</span> ^ ^</span><br><span class="line">        <span class="string">//</span> 4 3 5 5 9  <span class="string">//</span> 5&gt;3，交换</span><br><span class="line">        <span class="string">//</span>   ^ ^</span><br><span class="line"></span><br><span class="line">        <span class="string">//</span> <span class="string">//</span> 第四趟</span><br><span class="line">        <span class="string">//</span> 3 4 5 5 9  <span class="string">//</span> 4&gt;3，交换</span><br><span class="line">        <span class="string">//</span> ^ ^</span><br><span class="line"></span><br><span class="line">        <span class="string">//</span> <span class="string">//</span> 结果</span><br><span class="line">        <span class="string">//</span> 3 4 5 5 9</span><br><span class="line"></span><br><span class="line">    &lt;<span class="string">/script</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="string">/body</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="string">/html</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>插入排序<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//swap是交换数组内位置的函数</span></span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">swap</span><span class="params">(_arr, index1, index2)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">const</span> arr = _arr;</span></span><br><span class="line"><span class="undefined">            arr[index1] += arr[index2];</span></span><br><span class="line"><span class="undefined">            arr[index2] = arr[index1] - arr[index2];</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 插入排序就是要把后面的数往前面插入。假定第一项已经排序了，接着从第二项开始，依次判断当前项应该插入到前面的哪个位置。 </span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 基本思路：</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 1.从第二项开始(i=1)，当前项(i)，缓存其值和位置；</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 2.向前遍历，指针f初始化为i位置，如果f-1大于当前项的值，则交换f和f-1（即f-1向后移动一位），并f--；</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 3.如果遇到f-1小于当前值，或f=0时停止循环，这时候f即是当前项的位置，将之前的缓存值写入该位置。</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">insertionSort</span><span class="params">(_arr)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">const</span> arr = [].slice.call(_arr);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">const</span> len = arr.length;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 从第2个元素开始和前面的元素比较，取到最后一个元素完</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; len; i += <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> f = i;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 获取到当前要比较元素的值</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">const</span> temp = arr[i];</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 遇到f-1小于当前值，或f=0时停止循环</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">while</span> (f &gt; <span class="number">0</span> &amp;&amp; arr[f - <span class="number">1</span>] &gt; temp) &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 值更大的那一个元素向后移动,即当前比较的元素向前插入</span></span></span><br><span class="line"><span class="undefined">                    arr[f] = arr[f - 1];</span></span><br><span class="line"><span class="undefined">                    f -= 1;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 这时候f即是当前项的位置，将之前的缓存值写入该位置</span></span></span><br><span class="line"><span class="undefined">                arr[f] = temp;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> arr;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">       <span class="built_in">console</span>.log(insertionSort([<span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">3</span>]))</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// // 演示过程</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 5 4 9 5 3</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// // 第一趟，当前项是1号位，数字4</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// _ 5 9 5 3  // 4&lt;5，5向后移动</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// ^ ^</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 4 5 9 5 3  // 遍历结束，写入4</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// ^</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// // 第二趟，当前项是2号位，数字9</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 4 5 9 5 3  // 9&gt;5，不变</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//   ^</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 4 5 9 5 3  // 9&gt;4，不变，遍历结束</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// ^</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// // 第三趟，当前项是3号位，数字5</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 4 5 _ 9 3  // 5&lt;9，9向后移动</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//     ^ ^</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 4 5 _ 9 3  // 5=5，不变</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//   ^</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 4 5 _ 9 3  // 5&gt;4，不变</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// ^</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 4 5 5 9 3  // 遍历结束，写入5</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//     ^</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// // 第四趟，当前项是4号位，数字3</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 4 5 5 _ 9  // 3&lt;9，9向后移动</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//       ^ ^</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 4 5 _ 5 9  // 3&lt;5，5向后移动</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//     ^ ^</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 4 _ 5 5 9  // 3&lt;5，5向后移动</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//   ^ ^</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// _ 4 5 5 9  // 3&lt;4，4向后移动</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// ^ ^</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 3 4 5 5 9  // 遍历结束，写入3</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// ^</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// // 结果</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 3 4 5 5 9</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>选择排序<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">      <span class="comment">//swap是交换数组内位置的函数</span></span></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">swap</span><span class="params">(_arr, index1, index2)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">const</span> arr = _arr;</span></span><br><span class="line"><span class="undefined">            arr[index1] += arr[index2];</span></span><br><span class="line"><span class="undefined">            arr[index2] = arr[index1] - arr[index2];</span></span><br><span class="line"><span class="undefined">            arr[index1] -= arr[index2];</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 选择排序算法是一种原址比较排序算法。这也是比较简单的过程，只要不断遍历找到最小的数依次放入位置即可。 </span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 基本思路：</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 1.设定一个指针指向最小的数，从0号位开始；</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 2.遍历数据，如果遇到比当前指针指向的数还小的数，就将指针重新指向这个新位置；</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 3.遍历完成即得到了最小的数的位置，把0号位与这个位置的数交换；</span></span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 4.接下来就是1号位，重复以上步骤直到全部位置都正确</span></span></span><br><span class="line"><span class="undefined">          </span></span><br><span class="line"><span class="undefined">          </span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">selectionSort</span><span class="params">(_arr)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">const</span> arr = [].slice.call(_arr);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">const</span> len = arr.length;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 从0号位开始遍历，只取到倒数第二个值</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i += <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 选定指针的位置，依次作为指针的指向</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> indexMin = i;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 从第二个元素开始进行比较,取到最后一个元素</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">for</span> (<span class="keyword">let</span> f = i + <span class="number">1</span>; f &lt; len; f += <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">// 如果当前的元素比指针位的元素小，则把小的那个值赋值给indexMin</span></span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">if</span> (arr[indexMin] &gt; arr[f]) &#123;</span></span><br><span class="line"><span class="undefined">                            indexMin = f;</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 如果指针的位置换了位置，即不等于原始i的值，则交换位置</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">if</span> (indexMin !== i) &#123;</span></span><br><span class="line"><span class="undefined">                        swap(arr, indexMin, i);</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> arr;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(selectionSort([<span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">3</span>]))</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 实例过程</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 5 4 9 5 3</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// // 第一趟，指针指向0号位</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 5 4 9 5 3  // 4&lt;5，指针指向1号位</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//   ^</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 5 4 9 5 3  // 9&gt;4，指针不变</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//   ^</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 5 4 9 5 3  // 5&gt;4，指针不变</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//   ^</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 5 4 9 5 3  // 3&lt;4，指针指向4号位</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//         ^</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 3 4 9 5 5   // 遍历结束，交换0号位和4号位</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// // 第二趟，指针指向1号位</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 3 4 9 5 5  // 9&gt;4，指针不变</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//   ^</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 3 4 9 5 5  // 5&gt;4，指针不变</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//   ^</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 3 4 9 5 5  // 5&gt;4，指针不变</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//   ^</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 3 4 9 5 5  // 遍历结束，1号位不变</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// // 第三趟，指针指向2号位</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 3 4 9 5 5  // 5&lt;9，指针指向3号位</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//       ^</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 3 4 9 5 5  // 5=5，指针不变</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//       ^</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 3 4 5 9 5  // 遍历结束，交换2号位和3号位</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// // 第四趟，指针指向3号位</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 3 4 5 9 5  // 5&lt;9，指针指向4号位</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//         ^</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 3 4 5 5 9  // 遍历结束，交换3号位和4号位</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// // 结果</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 3 4 5 5 9</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>快速排序<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 快速排序的思想跟归并很像，都是分治方法，但它没有像归并排序那样将它们分割开，而是使用指针游标来标记，每次会确定一个参考数的位置。稍微会比前面的复杂一些。 </span></span></span><br><span class="line"><span class="undefined">       </span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 基本思路：</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 1.取数组的第0项作为参考数，缓存0号位的数。</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 2.设定一个从0号位开始的low指针，一个从末尾开始的high指针；</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 3.先从high指针开始移动，指针指向的数与参考数做比较，如果大于或等于参考数则继续向前移动，如果小于参考数则停下并把high指针指向的数替换到当前low指针指向的位置；</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 4.再从low指针开始移动，指针指向的数与参考数做比较，如果小于或等于参考数则继续向后移动，如果大于参考数则停下并把low指针指向的数替换到当前high指针指向的位置；</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 5.如此循环交替移动两个指针，直到low指针的指向位高于或等于high的指向位；</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 6.至此low指向位即是参考数的位置pivotloc，将参考数写入low指向的位置；</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 7.以此位置pivotloc为分割，在左右两边重复上述的步骤，直到排序完成。</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">quickSort</span><span class="params">(_arr)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">const</span> arr = [].slice.call(_arr);</span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">partition</span><span class="params">(low, high)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 首先设置一个参考的数，一般是以第一个数为参考数</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">const</span> pivotkey = arr[low];</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 定义最左边的指针和定义最右边的指针</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> i = low;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> j = high;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 当i和j还没相遇的时候就一直循环</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">while</span> (i &lt; j) &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// i&lt;j且数都比参考数大的时候从右往左找，找到比参考数pivotkey小的数</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt;= pivotkey) &#123;</span></span><br><span class="line"><span class="undefined">                        j -= 1;</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 找到了比参考数小的数就停止下来，然后就该从左边开始找了 </span></span></span><br><span class="line"><span class="undefined">                    arr[i] = arr[j];</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// // i&lt;j且数都比参考数小的时候从左往右找，找到比参考数pivotkey大的数</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt;= pivotkey) &#123;</span></span><br><span class="line"><span class="undefined">                        i += 1;</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 找到了比参考数大的数就与右边找到的比参考数小的那个数进行交换位置，然后第一轮交换就结束了。然后继续又右边开始找，开始第二轮交换。</span></span></span><br><span class="line"><span class="undefined">                    arr[j] = arr[i];</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 当i和j相遇的时候，这一次的所有交换就结束了。这时，将当前相遇的位置与参考数交换。</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 这时，参考数的左边都是比参考数小的数，右边都是比参考数大的数</span></span></span><br><span class="line"><span class="undefined">                arr[i] = pivotkey;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> i;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="actionscript">            (<span class="function"><span class="keyword">function</span> <span class="title">QSort</span><span class="params">(low, high)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 这时对两边的序列继续进行上面的操作，继续交换，进行排序，</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span> (low &lt; high) &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">const</span> pivotloc = partition(low, high);</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 左边的序列</span></span></span><br><span class="line"><span class="undefined">                    QSort(low, pivotloc - 1);</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 右边的序列</span></span></span><br><span class="line"><span class="undefined">                    QSort(pivotloc + 1, high);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;(0, arr.length - 1));</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> arr;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(quickSort([<span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">3</span>]))</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 演示过程</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 5 4 9 5 3</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// // 第一趟，参考数为5</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 5 4 9 5 3  // high开始移动，3&lt;5，high停止</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// ^L      ^H</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 3 4 9 5 3  // 将high指向数3写入到low位置</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// ^L      ^H</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 3 4 9 5 3  // low开始移动，3&lt;5，继续前进</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// ^L      ^H</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 3 4 9 5 3  // 4&lt;5，继续前进</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//   ^L    ^H</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 3 4 9 5 3  // 9&gt;5，low停止</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//     ^L  ^H</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 3 4 9 5 9  // 将low指向数9写入到high位置</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//     ^L  ^H</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 3 4 9 5 9  // high开始移动，9&gt;5，继续后退</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//     ^L  ^H</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 3 4 9 5 9  // high开始移动，5=5，继续后退</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//     ^L^H</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 3 4 5 5 9  // 两指针重合，结束，确定参考数5的位置，写入</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//     *</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// // 第二趟，参考数为3</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 3 4 5 5 9  // high开始移动，4&gt;3，继续后退</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// ^L^H*</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 3 4 5 5 9  // 两指针重合，结束，确定参考数3的位置，写入</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// *   *</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// // 第三趟，参考数为4</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 3 4 5 5 9  // 两指针重合，结束，确定参考数4的位置，写入</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// * * *</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// // 第四趟，参考数为5</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 3 4 5 5 9  // high开始移动，9&gt;5，继续后退</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// * * * ^L^H</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 3 4 5 5 9  // 两指针重合，结束，确定参考数5的位置，写入</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// * * * *</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// // 第五趟，参考数为9</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 3 4 5 5 9  // 两指针重合，结束，确定参考数9的位置，写入</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// * * * * *</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// // 结果</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 3 4 5 5 9</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>转载文章时请注明本文的出处 || <a href="http://www.blog.54whg.cn" target="_blank" rel="noopener">咕噜先森的博客</a> 作者-&gt;@王华港</p></blockquote><script>var _hmt = _hmt || [];(function() {  var hm = document.createElement("script");  hm.src = "https://hm.baidu.com/hm.js?cb26b3220fad854a3119dd8d11ddc6eb";  var s = document.getElementsByTagName("script")[0];   s.parentNode.insertBefore(hm, s);})();</script>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>快运用 | 入门体验小教程 | 快到飞起</title>
      <link href="/2018/04/04/quickApp/"/>
      <content type="html"><![CDATA[<h4 id="什么是快运用"><a href="#什么是快运用" class="headerlink" title="什么是快运用"></a>什么是快运用</h4><ol><li><p>快应用是基于手机硬件平台的新型应用形态，标准是由主流手机厂商组成的快应用联盟联合制定。</p></li><li><p>快应用标准的诞生将在研发接口、能力接入、开发者服务等层面建设标准平台，以平台化的生态模式对个人开发者和企业开发者全品类开放。</p></li><li><p>快应用具备传统APP完整的应用体验，无需安装、即点即用。</p></li></ol><p>详情可见快运用官网<a href="https://www.quickapp.cn/" target="_blank" rel="noopener">官网</a></p><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>2018年3月20日，小米、中兴、华为、金立、联想、魅族、努比亚、OPPO、vivo、一加，共十家手机厂商在北京联合召开快应用标准启动发布会，手机厂商与中国信息通信研究院、电信终端产业协会、中国软件行业协会及数百家知名移动互联网应用企业共襄盛举，共同见证移动应用新生态的到来。</p><p>感觉看起来很牛逼，小编也想去看看究竟是个什么玩意儿。通过小编到官网的一探究竟，发现和Vue.js很相似，不管是结构还是语法上都很类似。好吧，话不多少，随着小编一起去体验一把吧。</p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ol><li>这里的入门教程</li><li>一台安卓手机或者是模拟器</li><li>一台电脑</li></ol><h4 id="出发"><a href="#出发" class="headerlink" title="出发"></a>出发</h4><h5 id="1-搭建环境"><a href="#1-搭建环境" class="headerlink" title="1.搭建环境"></a>1.搭建环境</h5><p>【安装node.js】<br>需安装6.0以上版本的NodeJS，请从NodeJS官网下载，推荐v6.11.3<br>注意: 不要使用8.0.*版本．这个版本内部ZipStream实现与node-archive包不兼容，会引起报错<br>这是官方推荐的版本</p><p>【安装工具hap-toolkit】<br>通过npm仓库安装，在命令行中执行以下命令：<br><code>npm install -g hap-toolkit</code><br>在命令行中执行hap -V会输出版本信息表示hap-toolkit安装成功，注意V是大写。</p><p>【创建工程】<br>新建一个文件夹，打开命令行，并cd到新建的文件夹目录下，进行初始化项目，执行以下命令：<br><code>hap init YourProjectName</code><br>【安装依赖】<br>一定要cd到你初始化的项目目录下，不是当前目录哦<br><code>npm install</code><br>【编译项目】<br>在项目文件夹下，执行以下命令：<br><code>npm run build</code><br>这是，可能会报如下的错<br><img src="/images/buildErr.png" alt=""></p><p>淡定，只需要执行一次 hap update –force 即可解决, 对包强制进行升级。<br><img src="/images/ferk.png" alt=""></p><p>然后再执行npm run build进行编译便能成功，可以看到如下界面。<br><img src="/images/build.png" alt=""></p><p>编译成功以后，工程项目会多处两个文件夹：</p><p>build：存放编译后的页面js文件和素材</p><p>dist：存放编译打包生成的rpk压缩文件，这个rpk就是快应用的最终执行文件了。</p><p>【最后一步，预览项目】<br>你的手机或者模拟器需要安装 <a href="https://statres.quickapp.cn/quickapp/quickapp/201803/file/quickapp_debugger.apk" target="_blank" rel="noopener">快应用调试器</a> 和 <a href="https://statres.quickapp.cn/quickapp/quickapp/201803/file/quickapp_platform_preview_release.apk" target="_blank" rel="noopener">平台预览版</a> 下载后用直接USB或者QQ传输安装到手机。注意，两个apk都要安装！平台预览版是模拟快应用的运行时环境的。</p><p>安装前面编译出来的rpk文件</p><p>方法一： 本地安装预览</p><p>将你的工程中/dist目录下编译产出的rpk文件，复制到手机文件系统中。<br>打开手机上的“快应用调试器” 点击“本地安装” 选择手机文件系统前面复制进来的rpk文件，即可预览到你的快应用的界面。</p><p>方法二： 扫码预览<br>在项目文件夹下运行以下命令<br><code>npm run server</code><br>服务器启动后会显示如下的二维码，打开手机上的“快应用调试器”，点击“扫码安装”，扫这个二维码即可安装快应用进行预览。<br><img src="/images/ewm.png" alt=""></p><blockquote><p>推荐使用方法一，方法二可能扫描识别不了二维码。</p></blockquote><p>如果看到如下界面，表示你已经成功开启了【快运用】的大门了，可以愉快的开始学习快运用了。<br><img src="/images/quick2.png" alt=""><br><img src="/images/quick3.png" alt=""><br><img src="/images/quick1.png" alt=""></p><p>OK,至此快运用的介绍就到这里了。如果感兴趣的可以到官网了解更多<a href="https://doc.quickapp.cn/" target="_blank" rel="noopener">官方文档</a></p><script>var _hmt = _hmt || [];(function() {  var hm = document.createElement("script");  hm.src = "https://hm.baidu.com/hm.js?cb26b3220fad854a3119dd8d11ddc6eb";  var s = document.getElementsByTagName("script")[0];   s.parentNode.insertBefore(hm, s);})();</script>]]></content>
      
      <categories>
          
          <category> 快运用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快运用 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>教学视频 | git的基本命令使用教学视频</title>
      <link href="/2018/04/01/gitLearnMovie/"/>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>git是当今非常流行的版本控制管理器，在项目开发中使用得非常多。但是很多人去网上看着文章学习的时候总会出现一些大大小小的错误，导致操作失败。这是一个全程录制的教学视频，每一步都很详细，希望能够帮助到你并能够顺利的使用git。</p><p>视频中的git命令清单可以参看我的博客<a href="http://blog.54whg.cn/2018/03/17/gitLearn/" target="_blank" rel="noopener">【Git 常用的基本命令】</a></p><h3 id="演示视频（可全屏观看）"><a href="#演示视频（可全屏观看）" class="headerlink" title="演示视频（可全屏观看）"></a>演示视频（可全屏观看）</h3><iframe width="696" height="460" src="http://www.iqiyi.com/w_19rygr4jox.html" scrolling="no" frameborder="0" allowfullscreen></iframe><h3 id="git的基本命令"><a href="#git的基本命令" class="headerlink" title="git的基本命令"></a>git的基本命令</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">配置</span><br><span class="line">git config –<span class="keyword">global</span> user.name “Your Name”</span><br><span class="line">git config –<span class="keyword">global</span> user.email “email@example.<span class="keyword">com</span>“</span><br><span class="line"></span><br><span class="line">本地仓库—&gt;远程仓库的基本步骤</span><br><span class="line">git init 新建一个仓库</span><br><span class="line">git status 查看仓库当前的状态</span><br><span class="line">git <span class="built_in">add</span> 可反复多次使用，添加多个文件；</span><br><span class="line">git <span class="built_in">add</span> ./–<span class="keyword">all</span> 添加当前文件夹的所有文件</span><br><span class="line">git commit -<span class="keyword">m</span> “修改内容” 提交到本地仓库</span><br><span class="line">git remote 查看当前配置有哪些远程仓库</span><br><span class="line">git remote <span class="built_in">add</span> origin http<span class="variable">s:</span>//github.<span class="keyword">com</span>/WangHuagang/git-demo.git 将文件添加到指定的GitHub上的仓库</span><br><span class="line">git push -<span class="keyword">u</span> origin master(分支) 将文件推送到远程仓库上</span><br><span class="line">git pull origin master(将远程仓库的东西“拉”回来)</span><br><span class="line"></span><br><span class="line">其余常用的命令</span><br><span class="line">git status -s 查看变更日志</span><br><span class="line">git <span class="built_in">log</span> 可以查看提交日志</span><br><span class="line">git reset –hard (<span class="number">6</span>位版本号) 回归到指定版本</span><br><span class="line">git diff 可以用于对比当前状态和版本库中状态的变化</span><br><span class="line">git branch 查看分支</span><br><span class="line">git branch （分支名） 创建一个新的分支</span><br><span class="line">git checkout （分支名） 切换分支</span><br><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/WangHuagang/git-demo.git .(.表示当前目录) 将远程仓库整个项目克隆到当前目录</span><br><span class="line">git merge 合并某分支到当前分支</span><br><span class="line">git branch -d 删除分支</span><br><span class="line"></span><br><span class="line">将本地文件放在github上显示</span><br><span class="line"><span class="number">1</span>.创建gh-pages分支，利用gh-pages分支上传到远程仓库</span><br><span class="line"><span class="number">2</span>.配置文件CNAME：绑定域名</span><br></pre></td></tr></table></figure><script>var _hmt = _hmt || [];(function() {  var hm = document.createElement("script");  hm.src = "https://hm.baidu.com/hm.js?cb26b3220fad854a3119dd8d11ddc6eb";  var s = document.getElementsByTagName("script")[0];   s.parentNode.insertBefore(hm, s);})();</script>]]></content>
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>夜神 Android studio连接配置第三方模拟器·夜神</title>
      <link href="/2018/03/30/Android-studio%E8%BF%9E%E6%8E%A5%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A8%A1%E6%8B%9F%E5%99%A8/"/>
      <content type="html"><![CDATA[<h3 id="Android-Studio怎样连接配置第三方模拟器"><a href="#Android-Studio怎样连接配置第三方模拟器" class="headerlink" title="Android Studio怎样连接配置第三方模拟器"></a>Android Studio怎样连接配置第三方模拟器</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>想必大家都体验了一把Android studio的环境搭建，总会出现莫名其妙的问题，刚刚搭建好，写好“Hello World”准备运行，折腾了半天，结果AS自带的模拟器运行不上，缺少一个加速软件。到这里，心已经凉了一大截了，好吧，换第三方模拟器，genymotion肯定是首选。到官网进行注册，然后下载下来，傻瓜式的安装好genymotion和virtualbox，眼看就要成功了，报错，纳尼！！！居然报错了！没错，他就是报错了。又捣鼓半天，放弃了，再找找其他的第三方模拟器吧，好吧，现在直接步入正题。<br><img src="/images/err.png" alt=""></p><h4 id="夜神模拟器"><a href="#夜神模拟器" class="headerlink" title="夜神模拟器"></a>夜神模拟器</h4><p>夜神安卓模拟器，电脑玩手游的新一代神器。是当前唯一一款采用世界领先的内核技术（基于Android4.4.2 版本内核针在电脑上运行深度开发），具有同类模拟器中最快的运行速度 和最稳定的性能。玩家可以通过本软件在电脑上玩手机游戏， 感受更大的屏幕、更快的速度、更完美的操控体验。<br>直接步入正题。</p><ul><li>下载夜神模拟器  <a href="https://www.yeshen.com/" target="_blank" rel="noopener">官网下载</a></li><li>傻瓜式安装好夜神。</li><li>运行夜神模拟器。<br><img src="/images/yeshen.png" alt=""></li><li>打开命令行窗口。</li><li>cd到夜神的安装目录（如cd D:\Program Files\NOX\Nox\bin）。</li><li>执行以下命令：<code>nox_adb.exe connect 127.0.0.1:62001</code>，连接上模拟器。<br><img src="/images/as3.png" alt=""></li><li>在Android studio中运行app，弹出的ADB中选择连接好的夜神就可以了。<br><img src="/images/as1.png" alt=""><br><img src="/images/as2.png" alt=""></li><li>若Android Studio连接不上夜神，重启连接模拟器即可链接上。</li></ul><hr><p>OK，现在你就可以愉快的敲你的代码了！有什么问题可以给我留言哦。</p><script>var _hmt = _hmt || [];(function() {  var hm = document.createElement("script");  hm.src = "https://hm.baidu.com/hm.js?cb26b3220fad854a3119dd8d11ddc6eb";  var s = document.getElementsByTagName("script")[0];   s.parentNode.insertBefore(hm, s);})();</script>]]></content>
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>计数排序·JavaScript实现</title>
      <link href="/2018/03/29/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
      <content type="html"><![CDATA[<h2 id="计数排序算法"><a href="#计数排序算法" class="headerlink" title="计数排序算法"></a>计数排序算法</h2><h4 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h4><p>计数排序就是遍历数组记录数组下的元素出现过多次，然后把这个元素找个位置先安置下来，简单点说就是以原数组每个元素的值作为新数组的下标，而对应小标的新数组元素的值作为出现的次数，相当于是通过下标进行排序。</p><h4 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h4><p>计数排序的基本思想是对于给定的输入序列中的每一个元素x，确定该序列中值小于x的元素的个数（此处并非比较各元素的大小，而是通过对元素值的计数和计数值的累加来确定）。一旦有了这个信息，就可以将x直接存放到最终的输出序列的正确位置上。例如，如果输入序列中只有17个元素的值小于x的值，则x可以直接存放在输出序列的第18个位置上。</p><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>它的复杂度为Ο(n+k)（其中k是整数的范围）。</p><h4 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h4><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function countingSort(<span class="built_in">array</span>) &#123;</span><br><span class="line">    　　<span class="built_in">var</span> len = <span class="built_in">array</span>.<span class="built_in">length</span>,</span><br><span class="line">    　　B = [],</span><br><span class="line">    　　C = [],</span><br><span class="line">    　　<span class="built_in">min</span> = <span class="built_in">max</span> = <span class="built_in">array</span>[<span class="number">0</span>];</span><br><span class="line">    　　<span class="keyword">for</span> (<span class="built_in">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    　　　　<span class="built_in">min</span> = <span class="built_in">min</span> &lt;= <span class="built_in">array</span>[i] ? <span class="built_in">min</span> : <span class="built_in">array</span>[i];</span><br><span class="line">    　　　　<span class="built_in">max</span> = <span class="built_in">max</span> &gt;= <span class="built_in">array</span>[i] ? <span class="built_in">max</span> : <span class="built_in">array</span>[i];</span><br><span class="line">    　　　　C[<span class="built_in">array</span>[i]] = C[<span class="built_in">array</span>[i]] ? C[<span class="built_in">array</span>[i]] + <span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">    　　&#125;</span><br><span class="line">    　　<span class="keyword">for</span> (<span class="built_in">var</span> k = <span class="number">0</span>; k &lt;len; k++) &#123;</span><br><span class="line">    　　　　<span class="built_in">var</span> <span class="built_in">length</span> = C[k];</span><br><span class="line">    　　　　<span class="keyword">for</span>(<span class="built_in">var</span> m = <span class="number">0</span> ;m &lt;<span class="built_in">length</span> ; m++)&#123;</span><br><span class="line">    　　　　　　B.<span class="built_in">push</span>(k);</span><br><span class="line">    　　　　&#125;</span><br><span class="line">    　　&#125;</span><br><span class="line">    　　<span class="built_in">return</span> B;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">var</span> arr = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">2</span>];</span><br><span class="line">    console.<span class="built_in">log</span>(countingSort(arr));</span><br></pre></td></tr></table></figure><h4 id="计数排序动画演示"><a href="#计数排序动画演示" class="headerlink" title="计数排序动画演示"></a>计数排序动画演示</h4><p><img src="/images/px/js.gif" alt=""></p><script>var _hmt = _hmt || [];(function() {  var hm = document.createElement("script");  hm.src = "https://hm.baidu.com/hm.js?cb26b3220fad854a3119dd8d11ddc6eb";  var s = document.getElementsByTagName("script")[0];   s.parentNode.insertBefore(hm, s);})();</script>]]></content>
      
      <categories>
          
          <category> js算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>插入排序·JavaScript实现</title>
      <link href="/2018/03/28/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
      <content type="html"><![CDATA[<h2 id="插入排序算法"><a href="#插入排序算法" class="headerlink" title="插入排序算法"></a>插入排序算法</h2><h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><p>插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据。</p><h4 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h4><p>可以这么理解，在一个数组中我们不知道哪个是最小值，那么就假定第一个就是最小值，然后取第二个值与第一个值比较产排序后的序列，然后再取第三个值与排序后的序列进行比较插入到对应的位置，依次类推。</p><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>若数据的初始状态是正序的，那么只需要扫描一趟就完成了。此时是最好的时间复杂度：O(n)。<br>若数据的初始状态是反序的，那么需要扫描n-1次。此时是最坏的时间复杂度：O(n^2)。<br>平均时间：O(n^2)。</p><h4 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h4><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function insertionSort(<span class="built_in">array</span>) &#123;</span><br><span class="line">    　　<span class="keyword">for</span> (<span class="built_in">var</span> i = <span class="number">1</span>; i &lt; <span class="built_in">array</span>.<span class="built_in">length</span>; i++) &#123;</span><br><span class="line">    　　　　<span class="built_in">var</span> <span class="built_in">key</span> = <span class="built_in">array</span>[i];</span><br><span class="line">    　　　　<span class="built_in">var</span> j = i - <span class="number">1</span>;</span><br><span class="line">    　　　　<span class="keyword">while</span> ( <span class="built_in">array</span>[j] &gt; <span class="built_in">key</span>) &#123;</span><br><span class="line">    　　　　　　<span class="built_in">array</span>[j + <span class="number">1</span>] = <span class="built_in">array</span>[j];</span><br><span class="line">    　　　　　    j--;</span><br><span class="line">    　　　　&#125;</span><br><span class="line">    　　　　<span class="built_in">array</span>[j + <span class="number">1</span>] = <span class="built_in">key</span>;</span><br><span class="line">    　　&#125;</span><br><span class="line">    　　<span class="built_in">return</span> <span class="built_in">array</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">var</span> arr=[<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">4</span>];</span><br><span class="line">    console.<span class="built_in">log</span>(insertionSort(arr));</span><br></pre></td></tr></table></figure><h4 id="插入排序动画演示"><a href="#插入排序动画演示" class="headerlink" title="插入排序动画演示"></a>插入排序动画演示</h4><p><img src="/images/px/cr.gif" alt=""></p><!-- <script>var _hmt = _hmt || [];(function() {  var hm = document.createElement("script");  hm.src = "https://hm.baidu.com/hm.js?cb26b3220fad854a3119dd8d11ddc6eb";  var s = document.getElementsByTagName("script")[0];   s.parentNode.insertBefore(hm, s);})();</script> -->]]></content>
      
      <categories>
          
          <category> js算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>快速排序·JavaScript实现</title>
      <link href="/2018/03/27/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
      <content type="html"><![CDATA[<h2 id="快速排序算法"><a href="#快速排序算法" class="headerlink" title="快速排序算法"></a>快速排序算法</h2><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p><h4 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h4><p>可以这么理解，在一个数组中我们不知道哪个是最小值，那么就假定第一个就是最小值，然后取第二个值与第一个值比较产排序后的序列，然后再取第三个值与排序后的序列进行比较插入到对应的位置，依次类推。</p><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>若数据的初始状态是正序的，那么只需要扫描一趟就完成了。此时是最好的时间复杂度：O(n)。<br>若数据的初始状态是反序的，那么需要扫描n-1次。此时是最坏的时间复杂度：O(n^2)。<br>平均时间：O(n^2)。</p><h4 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">quickSort</span> = function(arr) &#123;</span><br><span class="line">    　　<span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) &#123; <span class="keyword">return</span> arr; &#125;</span><br><span class="line">    　　<span class="keyword">var</span> pivotIndex = <span class="type">Math</span>.floor(arr.length / <span class="number">2</span>);</span><br><span class="line">    　　<span class="keyword">var</span> pivot = arr.splice(pivotIndex, <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">    　　console.log(pivot);<span class="comment">//查看每一次的中间点</span></span><br><span class="line">    　　<span class="keyword">var</span> <span class="keyword">left</span> = [];</span><br><span class="line">    　　<span class="keyword">var</span> <span class="keyword">right</span> = [];</span><br><span class="line">    　　<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    　　　　<span class="keyword">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class="line">    　　　　　　<span class="keyword">left</span>.push(arr[i]);</span><br><span class="line">    　　　　&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    　　　　　　<span class="keyword">right</span>.push(arr[i]);</span><br><span class="line">    　　　　&#125;</span><br><span class="line">    　　&#125;</span><br><span class="line">    　　<span class="keyword">return</span> <span class="built_in">quickSort</span>(<span class="keyword">left</span>).concat([pivot], <span class="built_in">quickSort</span>(<span class="keyword">right</span>));</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> arr=[<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">4</span>];</span><br><span class="line">    console.log(<span class="built_in">quickSort</span>(arr));</span><br></pre></td></tr></table></figure><h4 id="快速排序动画演示"><a href="#快速排序动画演示" class="headerlink" title="快速排序动画演示"></a>快速排序动画演示</h4><p><img src="/images/px/ks.gif" alt=""></p><blockquote><p>转载文章时请注明本文的出处 || <a href="http://www.blog.54whg.cn" target="_blank" rel="noopener">咕噜先森的博客</a> 作者-&gt;@王华港</p></blockquote><script>var _hmt = _hmt || [];(function() {  var hm = document.createElement("script");  hm.src = "https://hm.baidu.com/hm.js?cb26b3220fad854a3119dd8d11ddc6eb";  var s = document.getElementsByTagName("script")[0];   s.parentNode.insertBefore(hm, s);})();</script>]]></content>
      
      <categories>
          
          <category> js算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>选择排序·JavaScript实现</title>
      <link href="/2018/03/26/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
      <content type="html"><![CDATA[<h2 id="选择排序算法"><a href="#选择排序算法" class="headerlink" title="选择排序算法"></a>选择排序算法</h2><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p>选择排序是一种简单直观的排序算法。它的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。</p><h4 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h4><p>对比数组中前一个元素跟后一个元素的大小，如果后面的元素比前面的元素小则用一个变量k来记住他的位置，接着第二次比较，前面“后一个元素”现变成了“前一个元素”，继续跟他的“后一个元素”进行比较如果后面的元素比他要小则用变量k记住它在数组中的位置(下标)，等到循环结束的时候，我们应该找到了最小的那个数的下标了，然后进行判断，如果这个元素的下标不是第一个元素的下标，就让第一个元素跟他交换一下值，这样就找到整个数组中最小的数了。然后找到数组中第二小的数，让他跟数组中第二个元素交换一下值，以此类推。</p><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>若数据的初始状态是正序的，那此时是最好的时间复杂度：O(n^2)。<br>若数据的初始状态是反序的，那么需要扫描n-1次。此时是最坏的时间复杂度：O(n^2)。<br>平均时间：O(n^2)。</p><h4 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xz</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len=arr.length;</span><br><span class="line">    <span class="keyword">var</span> minIndex,temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        minIndex=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j=i+<span class="number">1</span>;j&lt;len;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]&lt;arr[minIndex])&#123;<span class="comment">//判断更小的数</span></span><br><span class="line">                minIndex=j; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        temp=arr[i];</span><br><span class="line">        arr[i]=arr[minIndex];</span><br><span class="line">        arr[minIndex]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(xz(arr))</span><br></pre></td></tr></table></figure><h4 id="选择排序动画演示"><a href="#选择排序动画演示" class="headerlink" title="选择排序动画演示"></a>选择排序动画演示</h4><p><img src="/images/px/xz.gif" alt=""></p><blockquote><p>当数据量比较小时（1000左右），使用选择排序比冒泡排序更快。</p></blockquote><blockquote><p>转载文章时请注明本文的出处 || <a href="http://www.blog.54whg.cn" target="_blank" rel="noopener">咕噜先森的博客</a> 作者-&gt;@王华港</p></blockquote><script>var _hmt = _hmt || [];(function() {  var hm = document.createElement("script");  hm.src = "https://hm.baidu.com/hm.js?cb26b3220fad854a3119dd8d11ddc6eb";  var s = document.getElementsByTagName("script")[0];  s.parentNode.insertBefore(hm, s);})();</script>]]></content>
      
      <categories>
          
          <category> js算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>冒泡排序·JavaScript实现</title>
      <link href="/2018/03/25/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
      <content type="html"><![CDATA[<h2 id="冒泡排序算法"><a href="#冒泡排序算法" class="headerlink" title="冒泡排序算法"></a>冒泡排序算法</h2><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。</p><h4 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h4><p>比较相邻的元素。如果第一个比第二个大，就交换他们两个。<br>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。<br>针对所有的元素重复以上的步骤，除了最后一个。<br>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>若数据的初始状态是正序的，那么只需要扫描一趟就完成了。此时是最好的时间复杂度：O(n)。<br>若数据的初始状态是反序的，那么需要扫描n-1次。此时是最坏的时间复杂度：O(n^2)。<br>平均时间：O(n^2)。</p><h4 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h4><p>1.最基础，也是最容易理解的一种做法。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function bubbleSort(arr) &#123;</span><br><span class="line">　　var len = arr.length;</span><br><span class="line">　　for (var i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">　　　　for (var j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">　　　　　　if (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123; <span class="comment">//相邻元素两两对比</span></span><br><span class="line">　　　　　　　　var temp = arr[j+<span class="number">1</span>]; <span class="comment">//元素交换</span></span><br><span class="line">　　　　　　　　arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">　　　　　　　　arr[j] = temp;</span><br><span class="line">　　　　　　&#125;</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;</span><br><span class="line">　　return arr;</span><br><span class="line">&#125;</span><br><span class="line">var arr=[<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">4</span>];</span><br><span class="line">console.log(bubbleSort(arr));</span><br></pre></td></tr></table></figure></p><p>2.更简单一点的，但不是那么容易理解的一种算法。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function bubbleSort2(arr) &#123;</span><br><span class="line">　　var i = arr.length<span class="number">-1</span>; <span class="comment">//初始时,最后位置保持不变　　</span></span><br><span class="line">　　while ( i&gt; <span class="number">0</span>) &#123;</span><br><span class="line">　　　　var pos= <span class="number">0</span>; <span class="comment">//每趟开始时,无记录交换</span></span><br><span class="line">　　　　for (var j= <span class="number">0</span>; j&lt; i; j++)&#123;</span><br><span class="line">　　　　　　if (arr[j]&gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">　　　　　　　　pos= j; <span class="comment">//记录交换的位置</span></span><br><span class="line">　　　　　　　　var tmp = arr[j]; arr[j]=arr[j+<span class="number">1</span>];arr[j+<span class="number">1</span>]=tmp;</span><br><span class="line">　　　　　　&#125;</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　　　i= pos; <span class="comment">//为下一趟排序作准备</span></span><br><span class="line">　　&#125;</span><br><span class="line">　　return arr;</span><br><span class="line">&#125;</span><br><span class="line">var arr=[<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">4</span>];</span><br><span class="line">console.log(bubbleSort2(arr));</span><br></pre></td></tr></table></figure></p><h4 id="冒泡排序动画演示"><a href="#冒泡排序动画演示" class="headerlink" title="冒泡排序动画演示"></a>冒泡排序动画演示</h4><p><img src="/images/px/mp.gif" alt=""></p><blockquote><p>转载文章时请注明本文的出处 || <a href="http://www.blog.54whg.cn" target="_blank" rel="noopener">咕噜先森的博客</a> 作者-&gt;@王华港</p></blockquote><script>var _hmt = _hmt || [];(function() {  var hm = document.createElement("script");  hm.src = "https://hm.baidu.com/hm.js?cb26b3220fad854a3119dd8d11ddc6eb";  var s = document.getElementsByTagName("script")[0];   s.parentNode.insertBefore(hm, s);})();</script>]]></content>
      
      <categories>
          
          <category> js算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>What is closure？怎样理解闭包</title>
      <link href="/2018/03/19/closure/"/>
      <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>闭包这个东西在JavaScript中是一个很强大的东西，但是在初学的阶段总是被其概念绕晕，搞不清楚到底什么是闭包，感觉很高深。作者在刚学的时候也有一点懵圈，多看几次就会有自己的理解。任何东西都没有唯一的标准，只要适合自己，自己能够理解的就是正确的。由于作者水平有限，将自己的一些见解拿出来，希望大家能够提出宝贵的意见。</p><h2 id="2-作用域"><a href="#2-作用域" class="headerlink" title="2.作用域"></a>2.作用域</h2><p>在正式讲闭包之前，我们来简单的说一说作用域这个东西。这个很有助于大家理解后面的闭包。<br>什么是域？简单的说就是一个被圈起来的地方，也就是变量能够访问的一个范围。<br>众所周知，变量的作用域分为全局变量和局部变量。定义在函数外部的称为全局变量，在函数内部的称为局部变量。这里顺带提一下，变量提升这个玩意儿，也就是和“先声明后使用差不多的道理”，后面我将会举一个例子来说明。<br>举个例子，全局变量和局部变量:<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="string">'wang'</span>;</span><br><span class="line">function <span class="function"><span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b=<span class="string">'huagang'</span>;</span><br><span class="line">    console.log(<span class="string">'这是在函数内部的输出'</span>);</span><br><span class="line">    console.log(a);</span><br><span class="line">    console.log(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">fun</span><span class="params">()</span></span>;<span class="comment">//调用函数</span></span><br><span class="line"></span><br><span class="line">console.log(<span class="string">"这是在函数外部的输出"</span>);</span><br><span class="line">console.log(a);</span><br><span class="line">console.log(b);</span><br></pre></td></tr></table></figure></p><p>运行结果:<br><img src="/images/closure/clo1.png" alt="运行结果"><br>最后一个输出b的时候抛出了一个未定义异常，由此可见，全局变量（a）在函数内部和外部都是能访问的，但是局部变量不是这样的，在函数作用域外是不能访问到函数内部的变量（b）的。这里顺带讲一下【变量提升】吧，简单的举一个例子。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">a=<span class="string">'wang'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure></p><p><img src="/images/closure/clo2.png" alt="运行结果"><br>根据输出情况可以看出，第一次输出a并没有报异常，而是undefined。第二次便能输出a的值。这就是变量提升的特点，在变量还没赋值前就拿来使用了。</p><h2 id="3-嵌套函数的作用域"><a href="#3-嵌套函数的作用域" class="headerlink" title="3.嵌套函数的作用域"></a>3.嵌套函数的作用域</h2><p>嵌套函数，顾名思义就是在函数的内部再写一个或多个函数。下面举一个例子来讲解一下嵌套函数的作用域。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funA</span>(<span class="params">c</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a=<span class="string">'wang'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">funB</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> b=<span class="string">'gang'</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"在函数B中的输出："</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">        <span class="built_in">console</span>.log(c);</span><br><span class="line">        <span class="built_in">console</span>.log(b);</span><br><span class="line">    &#125;</span><br><span class="line">    funB();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"在函数A中的输出："</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">console</span>.log(c);</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;</span><br><span class="line">funA(<span class="string">'hua'</span>);<span class="comment">//调用函数A并传参</span></span><br></pre></td></tr></table></figure></p><p><img src="/images/closure/clo3.png" alt="运行结果"><br>函数B就是嵌套在函数A中的嵌套函数，它可以继承函数A的变量和参数，但是B中的变量A是不能访问的，就好像B给自己的门上了锁，“只进不出”，我可以拿你的东西，但是你不可以拿我的东西。B这样就形成了一个自己独有的封闭空间，这就是一个闭包。<br>从不同的角度来看：从语法结构上看，函数A包含函数B；从作用域来看，函数B包含函数A，也就是说B能访问的空间比A大。<br>因此可以想象得出，假如B函数中还有一个嵌套函数X，那么这个X函数也是一个闭包，作用域包含B和A。这样下去就形成了一个作用域链。</p><h2 id="4-闭包"><a href="#4-闭包" class="headerlink" title="4.闭包"></a>4.闭包</h2><p>相信通过上面的讲解，大家已经懂得了什么是闭包，现在再讲讲一些关于闭包的特点或者特性吧。</p><h4 id="保存变量"><a href="#保存变量" class="headerlink" title="保存变量"></a>保存变量</h4><p>什么是保存变量？加入B这个闭包需要两个变量才能运行，但是刚开始只传了一个参数进去，所以这时候闭包就会把这个变量的值进行保存，等待第二个变量传入，而不是丢弃这个变量的值。下面举一个例子进行说明吧。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funA</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">funB</span>(<span class="params">b</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> funB;<span class="comment">//调用函数B的引用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = funA(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> sum = x(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sum);<span class="comment">//输出结果 5</span></span><br></pre></td></tr></table></figure></p><p><img src="/images/closure/clo4.png" alt="运行结果"><br>当函数A传进参数a=2时，这时闭包B就将a进行保存，等到再传b=3时再进行计算。这就是闭包的保存变量。</p><h2 id="5-为什么要使用闭包"><a href="#5-为什么要使用闭包" class="headerlink" title="5.为什么要使用闭包"></a>5.为什么要使用闭包</h2><p>使用闭包的最大的好处——避免变量的污染。也就是说你在闭包中声明的变量不会影响在其他地方也使用这个变量名称，因为闭包将这个变量锁在自己的门里面保护起来了，外部是无法修改的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funA</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">funB</span>(<span class="params">b</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="string">'wang'</span>;<span class="comment">//内部变量 c</span></span><br><span class="line">        <span class="keyword">return</span> a+b ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> funB;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'hua'</span>;<span class="comment">//外部变量x，是不能改变闭包B中的变量a的</span></span><br><span class="line"><span class="keyword">var</span> sum = funA()(a);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></table></figure></p><p><img src="/images/closure/clo5.png" alt="运行结果"><br>可以看出，外部变量是不能修改闭包中的变量a的值的，从而保护了a的值，使其不会受到污染。</p><p>闭包的分享就讲到这里啦，我相信大家能够对闭包能够有一定的了解。当然，由于作者水平有限，这只是个人的见解，有误的地方还希望多多包涵，或者留言告知我。</p><blockquote><p>转载文章时请注明本文的出处 || <a href="http://www.blog.54whg.cn" target="_blank" rel="noopener">咕噜先森的博客</a> 作者-&gt;@王华港</p></blockquote><script>var _hmt = _hmt || [];(function() {  var hm = document.createElement("script");  hm.src = "https://hm.baidu.com/hm.js?cb26b3220fad854a3119dd8d11ddc6eb";  var s = document.getElementsByTagName("script")[0];   s.parentNode.insertBefore(hm, s);})();</script>]]></content>
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js如何实现倒计时的原理分析及实现</title>
      <link href="/2018/03/18/countDown/"/>
      <content type="html"><![CDATA[<h3 id="js倒计时原理"><a href="#js倒计时原理" class="headerlink" title="js倒计时原理"></a>js倒计时原理</h3><p>倒计时=预计时间点-当前时间点<br>最后将倒计时转换成我们所需要的格式即可（eg：<em>时</em>分*秒）<br>再使用setInterval(function, 1000);每一秒执行一次，动态刷新一次就好。</p><h3 id="js代码实现"><a href="#js代码实现" class="headerlink" title="js代码实现"></a>js代码实现</h3><figure class="highlight plain"><figcaption><span>timer </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">countDown();</span><br><span class="line">timer = setInterval(countDown, 1000);</span><br><span class="line"></span><br><span class="line">// 倒计时计算函数</span><br><span class="line">function countDown()&#123;</span><br><span class="line">    var nowTime = new Date();     // 获取当前日期</span><br><span class="line">    var endTime = new Date(2018,4,20,20,35,0);   //预计时间，注意month需要减1  </span><br><span class="line">    var t = Math.floor((endTime - nowTime)/1000);     // 计算差值（单位：秒）</span><br><span class="line">    var Day = Math.floor(Math.floor(t/86400));     // 天（86400 = 24*3600）</span><br><span class="line">    var Hour = Math.floor(t%86400/3600);   // 时</span><br><span class="line">    var Min = Math.floor((t%3600)/60);    // 分</span><br><span class="line">    var Sec = t%60;     // 秒</span><br><span class="line">    if ( t==0 )&#123;</span><br><span class="line">        clearInterval(timer);</span><br><span class="line">        document.getElementById(&quot;showDiv&quot;).innerHTML = &quot;倒计时结束！&quot;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        document.getElementById(&quot;showDiv&quot;) = &quot;倒计时还有：&quot; + add(Day) + &quot;天&quot; + add(Hour) + &quot;:&quot; + add(Min) + &quot;:&quot; + add(Sec);</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function add(iNum)&#123;</span><br><span class="line">    return iNum&lt;10 ? &quot;0&quot;+iNum : iNum; //若时间是个位数，则添加一个0在前面</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>转载文章时请注明本文的出处 || <a href="http://www.blog.54whg.cn" target="_blank" rel="noopener">咕噜先森的博客</a> 作者-&gt;@王华港</p></blockquote><script>var _hmt = _hmt || [];(function() {  var hm = document.createElement("script");  hm.src = "https://hm.baidu.com/hm.js?cb26b3220fad854a3119dd8d11ddc6eb";  var s = document.getElementsByTagName("script")[0];   s.parentNode.insertBefore(hm, s);})();</script>]]></content>
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python实战数据结构——列表/元组</title>
      <link href="/2018/03/18/singCount/"/>
      <content type="html"><![CDATA[<h3 id="Python实战题目"><a href="#Python实战题目" class="headerlink" title="Python实战题目"></a>Python实战题目</h3><p>比赛评分：校园歌手大奖赛中，每个歌手的得分由10名评委和观众决定，最终得分的规则是去掉10名评委所打分数的一个最高分和一个最低分，再加上所有观众评委分数后的平均值。请编写程序输入某个选手的10个评委分数和观众评分，计算其最后得分。</p><h3 id="实战分析"><a href="#实战分析" class="headerlink" title="实战分析"></a>实战分析</h3><p>1.先接受用户输入的所有数据，存在列表中，此时的数据为字符串，应当转换成float，因为求平均分可能会出现小数。</p><p>2.利用Python的内置函数sort()进行排序，这里不用管是升序还是降序。</p><p>3.利用pop函数去掉第一个和最后一个数，即达到了去掉最高分和最低分的要求。</p><p>4.利用for  in  遍历出剩下的所有数，并进行求和sum。</p><p>5.将sum与观众的分相加除以总人数便可算出最终得分。</p><h3 id="Python代码"><a href="#Python代码" class="headerlink" title="Python代码"></a>Python代码</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sum=0;</span><br><span class="line">inputScore=input(<span class="string">"请输入10个分数，以,隔开:"</span>);</span><br><span class="line">aScore=input(<span class="string">"请输入观众评分："</span>)</span><br><span class="line">splitScore=inputScore.split(',');</span><br><span class="line">intScore = list(map(float, splitScore))<span class="comment"># 把字符串转化成float</span></span><br><span class="line">intScore.sort()</span><br><span class="line">intScore.pop();<span class="comment">#去除末尾的数</span></span><br><span class="line">intScore.pop(0);<span class="comment">#去除最开始的数</span></span><br><span class="line">for x in intScore:</span><br><span class="line">    sum+=x;</span><br><span class="line">avg=(sum+float(aScore))/(len(intScore)+1);</span><br><span class="line">print(<span class="string">"该选手最终得分：%.2f"</span>%avg)</span><br></pre></td></tr></table></figure><blockquote><p>转载文章时请注明本文的出处 || <a href="http://www.blog.54whg.cn" target="_blank" rel="noopener">咕噜先森的博客</a> 作者-&gt;@王华港</p></blockquote><script>var _hmt = _hmt || [];(function() {  var hm = document.createElement("script");  hm.src = "https://hm.baidu.com/hm.js?cb26b3220fad854a3119dd8d11ddc6eb";  var s = document.getElementsByTagName("script")[0];   s.parentNode.insertBefore(hm, s);})();</script>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>base64编码的原理及分析</title>
      <link href="/2018/03/18/base64/"/>
      <content type="html"><![CDATA[<h2 id="1-为什么要使用base64编码"><a href="#1-为什么要使用base64编码" class="headerlink" title="1.为什么要使用base64编码"></a>1.为什么要使用base64编码</h2><p>因为有些网络传送渠道并不支持所有的字节，例如传统的邮件只支持可见字符的传送，像ASCII码的控制字符就不能通过邮件传送。这样就受到了很大的限制，比如图片二进制流的每个字节不可能全部是可见字符，所以就传送不了。最好的方法就是在不改变传统协议的情况下，开辟一种新的方案来支持二进制文件的传送。把不可见字符用可见字符来表示。而Base64就是一种基于64个可见字符来表示二进制数据的表示方法。</p><p><strong>提示：不可见字符其实并不是不显示，只是这些字符在屏幕上显示不出来，比如：换行符、回车、退格等字符。</strong></p><h2 id="2-base64编码的原理"><a href="#2-base64编码的原理" class="headerlink" title="2.base64编码的原理"></a>2.base64编码的原理</h2><p>Base64可以将ASCII字符串或者是二进制编码成只包含A—Z，a—z，0—9，+，/ 这64个字符（ 26个大写字母，26个小写字母，10个数字，1个+，一个 / 刚好64个字符）。</p><p>Base64的编码规则是将3个8位字节(3×8=24位)编码成4个6位的字节(4×6=24位)，之后在每个6位字节前面，补充两个0，形成4个8位字节的形式，那么取值范围就变成了0~63。又因为2的6次方等于64，所以每6个位组成一个单元。</p><p>下图为base64的字符转换表：<br><img src="/images/base64.png" alt="base64转换表"></p><p>说太多了感觉复杂，直接上例子：<br><img src="/images/base64_ex.png" alt="base64举例"></p><blockquote><p>该图片转载自 <a href="https://www.jianshu.com/p/dd8bffc91c3d" target="_blank" rel="noopener">https://www.jianshu.com/p/dd8bffc91c3d</a></p></blockquote><p><strong>所以，abc的base64的编码为YWJj；ab的base64编码为YWI=；a的base64编码为YQ==。</strong>     </p><p>若末尾的为0，则对应的是A，但通常都用=来表示。因为 = 字符并不在Base64编码索引表中，其意义在于结束符号，在Base64解码时遇到 = 时即可知道一个Base64编码字符串结束。<br>解码是对编码的逆向操作，但注意一点：对于最后的两个 = 字符，转换成两个A 字符，再转成对应的两个6比特二进制0值，接着转成原始字符之前，需要将最后的两个6比特二进制0值丢弃，因为它们实际上不携带有效信息。</p><p>在实际开发过程中，base64一般用于字符和图片的编码，最后，推荐一个在线base64的编码与解码网址：<a href="http://base64.xpcha.com/" target="_blank" rel="noopener">base64编码</a></p><blockquote><p>转载文章时请注明本文的出处 || <a href="http://www.blog.54whg.cn" target="_blank" rel="noopener">咕噜先森的博客</a> 作者-&gt;@王华港</p></blockquote><script>var _hmt = _hmt || [];(function() {  var hm = document.createElement("script");  hm.src = "https://hm.baidu.com/hm.js?cb26b3220fad854a3119dd8d11ddc6eb";  var s = document.getElementsByTagName("script")[0];   s.parentNode.insertBefore(hm, s);})();</script>]]></content>
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>9步教你搭建个人博客(Hexo+Github)</title>
      <link href="/2018/03/17/hexoBlog/"/>
      <content type="html"><![CDATA[<h4 id="1-下载并安装node-js和npm（新版本的node已经自带npm，不用单独下载）"><a href="#1-下载并安装node-js和npm（新版本的node已经自带npm，不用单独下载）" class="headerlink" title="1.下载并安装node.js和npm（新版本的node已经自带npm，不用单独下载）"></a>1.下载并安装node.js和npm（新版本的node已经自带npm，不用单独下载）</h4><p><img src="/images/hexo_github/hexo_1.png" alt="博主安装好的环境"></p><h4 id="2-安装git的环境，傻瓜式的安装方法，默认安装即可"><a href="#2-安装git的环境，傻瓜式的安装方法，默认安装即可" class="headerlink" title="2.安装git的环境，傻瓜式的安装方法，默认安装即可"></a>2.安装git的环境，傻瓜式的安装方法，默认安装即可</h4><p><img src="/images/hexo_github/hexo_2.png" alt="安装好后的情况"></p><h4 id="3-注册github账号，并创建一个新的仓库，仓库的格式一定要按照这种格式来：name-github-io，其他的默认就好"><a href="#3-注册github账号，并创建一个新的仓库，仓库的格式一定要按照这种格式来：name-github-io，其他的默认就好" class="headerlink" title="3.注册github账号，并创建一个新的仓库，仓库的格式一定要按照这种格式来：name.github.io，其他的默认就好"></a>3.注册github账号，并创建一个新的仓库，仓库的格式一定要按照这种格式来：<strong><em>name.github.io</em></strong>，其他的默认就好</h4><p><img src="/images/hexo_github/hexo_3.png" alt=""></p><h4 id="4-安装hexo，在电脑某个合适的地方新建一个文件夹（eg：blog），然后命令行进入到该文件夹，按照以下步骤进行安装"><a href="#4-安装hexo，在电脑某个合适的地方新建一个文件夹（eg：blog），然后命令行进入到该文件夹，按照以下步骤进行安装" class="headerlink" title="4.安装hexo，在电脑某个合适的地方新建一个文件夹（eg：blog），然后命令行进入到该文件夹，按照以下步骤进行安装"></a>4.安装hexo，在电脑某个合适的地方新建一个文件夹（eg：blog），然后命令行进入到该文件夹，按照以下步骤进行安装</h4><p>-安装hexo<br><code>npm install hexo -g</code><br>-检查是否安装成功<br><code>hexo -v</code><br>-初始化该文件夹<br><code>hexo init</code><br>-安装所需要的组件<br><code>hexo install</code><br>-体验一下hexo<br><code>hexo g</code><br>-开启服务器，正式访问网址体验hexo，输入localhost:4000访问<br><code>hexo s</code><br>若出现下图，启动服务器成功<br><img src="/images/hexo_github/4.png" alt=""><br>若不能成功，可能是端口冲突，请输入以下命令进行切换端口<br><code>hexo server -p</code><br>当看见出现以下页面，表示博客基本框架搭建成功<br><img src="/images/hexo_github/5.png" alt=""></p><h4 id="5-将hexo与GitHub联系起来，配置name和email（ps：如果已经配置过的可以忽略），在blog文件夹中右键打开Git-Bash进行配置"><a href="#5-将hexo与GitHub联系起来，配置name和email（ps：如果已经配置过的可以忽略），在blog文件夹中右键打开Git-Bash进行配置" class="headerlink" title="5.将hexo与GitHub联系起来，配置name和email（ps：如果已经配置过的可以忽略），在blog文件夹中右键打开Git Bash进行配置"></a>5.将hexo与GitHub联系起来，配置name和email（ps：如果已经配置过的可以忽略），在blog文件夹中右键打开Git Bash进行配置</h4><p><code>git config --global user.name &#39;your github name&#39;</code><br><code>git config --global user.email &#39;your github email&#39;</code></p><h5 id="5-1输入ssh-keygen-t-rsa-C-“cdu-whg-foxmail-com”-连续按三个回车键，生成秘钥，得到了两个文件：id-rsa和id-rsa-pub（默认存储路径是：C-Users-Administrator-ssh）。"><a href="#5-1输入ssh-keygen-t-rsa-C-“cdu-whg-foxmail-com”-连续按三个回车键，生成秘钥，得到了两个文件：id-rsa和id-rsa-pub（默认存储路径是：C-Users-Administrator-ssh）。" class="headerlink" title="5.1输入ssh-keygen -t rsa -C “cdu.whg@foxmail.com” ,连续按三个回车键，生成秘钥，得到了两个文件：id_rsa和id_rsa.pub（默认存储路径是：C:\Users\Administrator.ssh）。"></a>5.1输入ssh-keygen -t rsa -C “<a href="mailto:cdu.whg@foxmail.com" target="_blank" rel="noopener">cdu.whg@foxmail.com</a>” ,连续按三个回车键，生成秘钥，得到了两个文件：id_rsa和id_rsa.pub（默认存储路径是：C:\Users\Administrator.ssh）。</h5><h5 id="5-2-输入eval-“-ssh-agent-s-”，添加密钥到ssh-agent。"><a href="#5-2-输入eval-“-ssh-agent-s-”，添加密钥到ssh-agent。" class="headerlink" title="5.2 输入eval “$(ssh-agent -s)”，添加密钥到ssh-agent。"></a>5.2 输入eval “$(ssh-agent -s)”，添加密钥到ssh-agent。</h5><h5 id="5-3-再输入ssh-add-ssh-id-rsa，添加生成的SSH-key到ssh-agent。"><a href="#5-3-再输入ssh-add-ssh-id-rsa，添加生成的SSH-key到ssh-agent。" class="headerlink" title="5.3 再输入ssh-add ~/.ssh/id_rsa，添加生成的SSH key到ssh-agent。"></a>5.3 再输入ssh-add ~/.ssh/id_rsa，添加生成的SSH key到ssh-agent。</h5><h5 id="5-4-登陆GitHub，点击头像下拉菜单中的setting，添加ssh"><a href="#5-4-登陆GitHub，点击头像下拉菜单中的setting，添加ssh" class="headerlink" title="5.4 登陆GitHub，点击头像下拉菜单中的setting，添加ssh"></a>5.4 登陆GitHub，点击头像下拉菜单中的setting，添加ssh</h5><p><img src="/images/hexo_github/6.png" alt=""></p><h5 id="5-5-新建一个new-SSH-Key-，输入名称和秘钥（id-rsa-pub文件中的秘钥）即可"><a href="#5-5-新建一个new-SSH-Key-，输入名称和秘钥（id-rsa-pub文件中的秘钥）即可" class="headerlink" title="5.5 新建一个new SSH Key ，输入名称和秘钥（id_rsa.pub文件中的秘钥）即可"></a>5.5 新建一个new SSH Key ，输入名称和秘钥（id_rsa.pub文件中的秘钥）即可</h5><p><img src="/images/hexo_github/7.png" alt=""></p><h4 id="6-配置，找到根文件夹下的-config-yml文件，按照下图进行修改配置"><a href="#6-配置，找到根文件夹下的-config-yml文件，按照下图进行修改配置" class="headerlink" title="6.配置，找到根文件夹下的_config.yml文件，按照下图进行修改配置"></a>6.配置，找到根文件夹下的_config.yml文件，按照下图进行修改配置</h4><p><img src="/images/hexo_github/8.png" alt=""><br><img src="/images/hexo_github/9.png" alt=""></p><h4 id="7-开启写博客之旅，输入一下命令，建立第一篇blog"><a href="#7-开启写博客之旅，输入一下命令，建立第一篇blog" class="headerlink" title="7.开启写博客之旅，输入一下命令，建立第一篇blog"></a>7.开启写博客之旅，输入一下命令，建立第一篇blog</h4><p><code>hexo new post &#39;blogName&#39;</code></p><h5 id="在source-posts目录下可看见增加了一个hello-md文件，编辑该文件内容，便可发布博客了"><a href="#在source-posts目录下可看见增加了一个hello-md文件，编辑该文件内容，便可发布博客了" class="headerlink" title="在source/_posts目录下可看见增加了一个hello.md文件，编辑该文件内容，便可发布博客了"></a>在source/_posts目录下可看见增加了一个hello.md文件，编辑该文件内容，便可发布博客了</h5><p><img src="/images/hexo_github/10.png" alt=""></p><h4 id="8-在生成以及部署文章之前，需要安装一个扩展：npm-install-hexo-deployer-git-save"><a href="#8-在生成以及部署文章之前，需要安装一个扩展：npm-install-hexo-deployer-git-save" class="headerlink" title="8.在生成以及部署文章之前，需要安装一个扩展：npm install hexo-deployer-git --save"></a>8.在生成以及部署文章之前，需要安装一个扩展：<code>npm install hexo-deployer-git --save</code></h4><h4 id="9-安装完后便可以部署了，使用hexo-d-g进行部署"><a href="#9-安装完后便可以部署了，使用hexo-d-g进行部署" class="headerlink" title="9.安装完后便可以部署了，使用hexo d -g进行部署"></a>9.安装完后便可以部署了，使用<code>hexo d -g</code>进行部署</h4><p><img src="/images/hexo_github/11.png" alt=""></p><h5 id="部署成功后访问你的地址：http-用户名-github-io。那么就能看到生成发布的文章了。"><a href="#部署成功后访问你的地址：http-用户名-github-io。那么就能看到生成发布的文章了。" class="headerlink" title="部署成功后访问你的地址：http://用户名.github.io。那么就能看到生成发布的文章了。"></a>部署成功后访问你的地址：http://用户名.github.io。那么就能看到生成发布的文章了。</h5><p><img src="/images/hexo_github/12.png" alt=""></p><h4 id="OK，使用hexo-GitHub搭建基本的个人博客就完成了，后续会推出【提升版】，对个人博客进行更精致的设置以及绑定自己的域名。"><a href="#OK，使用hexo-GitHub搭建基本的个人博客就完成了，后续会推出【提升版】，对个人博客进行更精致的设置以及绑定自己的域名。" class="headerlink" title="OK，使用hexo+GitHub搭建基本的个人博客就完成了，后续会推出【提升版】，对个人博客进行更精致的设置以及绑定自己的域名。"></a>OK，使用hexo+GitHub搭建基本的个人博客就完成了，后续会推出【提升版】，对个人博客进行更精致的设置以及绑定自己的域名。</h4><p><code>console.log(&quot;敬请关注!&quot;)</code></p><blockquote><p>转载文章时请注明本文的出处 || <a href="http://www.blog.54whg.cn" target="_blank" rel="noopener">咕噜先森的博客</a> 作者-&gt;@王华港</p></blockquote><script>var _hmt = _hmt || [];(function() {  var hm = document.createElement("script");  hm.src = "https://hm.baidu.com/hm.js?cb26b3220fad854a3119dd8d11ddc6eb";  var s = document.getElementsByTagName("script")[0];   s.parentNode.insertBefore(hm, s);})();</script>]]></content>
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git 常用的基本命令</title>
      <link href="/2018/03/17/gitLearn/"/>
      <content type="html"><![CDATA[<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>git config –global user.name “Your Name”<br>git config –global user.email “<a href="mailto:email@example.com" target="_blank" rel="noopener">email@example.com</a>“</p><hr><h2 id="本地仓库—-gt-远程仓库的基本步骤"><a href="#本地仓库—-gt-远程仓库的基本步骤" class="headerlink" title="本地仓库—&gt;远程仓库的基本步骤"></a>本地仓库—&gt;远程仓库的基本步骤</h2><p>git init 新建一个仓库<br>git status 查看仓库当前的状态<br>git add <file> 可反复多次使用，添加多个文件；<br>git add ./–all  添加当前文件夹的所有文件<br>git commit -m “修改内容” 提交到本地仓库<br>git remote 查看当前配置有哪些远程仓库<br>git remote add origin <a href="https://github.com/WangHuagang/git-demo.git" target="_blank" rel="noopener">https://github.com/WangHuagang/git-demo.git</a> 将文件添加到指定的GitHub上的仓库<br>git push -u origin master(分支) 将文件推送到远程仓库上<br>git pull origin master(将远程仓库的东西“拉”回来)</file></p><hr><h2 id="其余常用的命令"><a href="#其余常用的命令" class="headerlink" title="其余常用的命令"></a>其余常用的命令</h2><p>git status -s  查看变更日志<br>git log   可以查看提交日志<br>git reset –hard (6位版本号) 回归到指定版本<br>git diff  可以用于对比当前状态和版本库中状态的变化<br>git branch   查看分支<br>git branch （分支名）   创建一个新的分支<br>git checkout （分支名）  切换分支<br>git clone <a href="https://github.com/WangHuagang/git-demo.git" target="_blank" rel="noopener">https://github.com/WangHuagang/git-demo.git</a> .(.表示当前目录) 将远程仓库整个项目克隆到当前目录<br>git merge <name>  合并某分支到当前分支<br>git branch -d <name>  删除分支</name></name></p><hr><h2 id="将本地文件放在github上显示"><a href="#将本地文件放在github上显示" class="headerlink" title="将本地文件放在github上显示"></a>将本地文件放在github上显示</h2><p>1.创建gh-pages分支，利用gh-pages分支上传到远程仓库<br>2.配置文件CNAME：绑定域名</p><hr><h2 id="git搭建自己的博客"><a href="#git搭建自己的博客" class="headerlink" title="git搭建自己的博客"></a>git搭建自己的博客</h2><p>1.npm install hexo-cli -g   安装hexo<br>2.hexo init blog   新建一个博客仓库<br>3.cd blog   到博客文件夹下<br>4.npm install   安装需要的包<br>5.hexo serve  开启博客</p><p><strong><em>hexo搭建博客更多的配置将会在后面继续更新</em></strong></p><blockquote><p>转载文章时请注明本文的出处 || <a href="http://www.blog.54whg.cn" target="_blank" rel="noopener">咕噜先森的博客</a> 作者-&gt;@王华港</p></blockquote><script>var _hmt = _hmt || [];(function() {  var hm = document.createElement("script");  hm.src = "https://hm.baidu.com/hm.js?cb26b3220fad854a3119dd8d11ddc6eb";  var s = document.getElementsByTagName("script")[0];   s.parentNode.insertBefore(hm, s);})();</script>]]></content>
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git学习 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
